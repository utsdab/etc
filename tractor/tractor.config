{
 ## ----------------------------- ##
 # tractor.config
 # Basic configuration settings for Tractor-Engine.
 #
 # NOTE: this file is formatted as single JSON dictionary, with
 # each entry consisting of a key-value pair, remember the comma
 # after each pair!  Comments like this are are non-standard JSON,
 # but are handled specially the engine's JSON parser.
 #
 # Note: on start-up, tractor-engine stores its own executable
 # location in its environment as ${TractorInstallDirectory}
 # which also can be referenced in paths below.
 #
 ## ----------------------------- ##

 # EngineOwner -- this is the login name that will be the owner
 # of the tractor-engine process, its data files, and its child
 # processes such as the job database server. If the parameter
 # is missing or set to the empty string "", then tractor-engine
 # will run as whichever user-id starts it.  This inherited user
 # mode can be useful for testing, but is sensible in cases where
 # the engine is run as a system service and login identity is
 # expected to be set externally through the service definition.
 # When a non-empty value is given here, then either that user must
 # start the engine or it must be started by root and the engine will
 # setuid to the given owner name after acquiring listener ports.
 # For security reasons, the value given here cannot be "root" nor
 # will the engine continue to run as root if the setting is empty
 # (a policy also enforced separately by the database server).
 # Studios are encouraged to create a login account specifically
 # for use as the owner ID of the engine process, largely to
 # encapsulate whatever permissions model is desired. The use of
 # pre-existing "service" accounts or "nobody" is also possible
 # in some cases, but should be discouraged to avoid conflicts
 # and confusion.
 #
 "EngineOwner": "mattg",  # empty means run as non-root launching user


 # ListenerPort -- this is the TCP/UDP service port that tractor-engine
 # uses to accept client requests from web-browsers, tractor-blades,
 # and job spoolers.  The specified port value must not be in use by
 # another application (such as a webserver), it must be accessible to
 # other hosts on the site network, and the owner of the engine process
 # must have permissions to use it.  NOTE: using port 80 is the built-in
 # default value for clients that must connect to this port, such as web
 # browsers, blades, spoolers, and tq. If you choose a different value
 # here then you MUST also supply that value in the --engine parameter
 # to blades and spoolers, tq sessions, and in every URL connection
 # from Dashboard browsers and admin scripts; although see the comments
 # regarding EngineDiscovery below for an alternative on small networks.
 #
 # Typically, ListenerPort is a simple integer port number, like 80.
 # A full "interface and port" pair can be specified instead, causing the
 # engine process to listen only on the host's given network interface
 # rather than all of them.  Use a quoted string such as "localhost:8181"
 # or "10.0.0.1:80" to specify the interface+port pair. The interface
 # portion can be given in dotted-quad notation or as a resolvable hostname.
 #
 "ListenerPort": 5600,


 # EngineDiscovery - engine discovery suitable for small studios.
 # This setting controls the engine's advertisement of its listener
 # address on the LAN, in lieu of a working DNS or other nameserver.
 # Tractor components can find each other using a lightweight multicast
 # discovery scheme (a subset of UPnP SSDP functionality).
 # Possibe settings here:
 # - json key not present e.g. commented out, defaults to "tractor-engine"
 # - value of empty json string "", means do NOT mcast announce at all
 # - value of "@", means ALWAYS mcast using IP addr from introspection
 # - value of "tractor-engine" or any other name, means:  do ssdp
 #   announcements ONLY if the given name is NOT resolvable via DNS.
 #   That is: these multicast discovery packets will not be used if your
 #   nameserver (DNS/AD/LDAP) is already able to resolve the given name.
 #   Thus large studios should set this value to "", or ensure that
 #   "tractor-engine" is resolvable, to completely disable engine
 #   multicast traffic.
 #
 "EngineDiscovery": "tractor-engine",


 # Tractor looks for licensing information by examining the same license
 # file locations as other Pixar applications.  It expects to find the file
 # "pixar.license" in the "root" of the main Pixar application directory,
 # assumed to be the parent directory of containing each installed Pixar app.
 # If a site needs special Tractor behavior beyond that, then administrators
 # can specify the license information with the environment variable
 # PIXAR_LICENSE_FILE, or by explicitly naming the file or license server
 # here as a configuration option.  Only use a setting here when the
 # shared locations are not workable.
 #
 #"LicenseLocation":         "${TractorInstallDirectory}/../pixar.license",
 #"LicenseLocation":         "${PIXAR_LICENSE_FILE}",
 "LicenseLocation":         "9010@DAB-Licence.adsroot.uts.edu.au",


 # MaxConcurrentDispatch
 # By default, the engine will consume all available Tractor license
 # seats and use that value to determine the number of concurrent
 # processes that can be launched on the render farm. You can restrict
 # the number of concurrent dispatches (and hence license seats) used
 # by a given tractor-engine by specifying the maximum here. This is
 # typically only useful during testing when a test engine should
 # limit its license usage relative to the main production engine.
 # Use the number zero to indicate "use all available" seats.
 #
 "MaxConcurrentDispatch": 0,


 # The Tractor data directory contains at least two distinct
 # types of subdirectories.  The "jobs" area holds the inbound
 # spooled jobs from users, as well as checkpointed information
 # about their progress. The "user" area holds files related
 # to each Tractor user, primarily regarding their dashboard
 # configuration settings.
 #
 # All of the files in the data directory should be considered
 # to be important assets. They should be part of regular back-ups
 # and not subject to arbitrary automatic deletion, etc.  When
 # users remove a running job, from the dashboard for example,
 # the job data is not actually deleted from the spool area.
 # Job data is retained for possible use in later site utilization
 # queries, or in case they need to be "undeleted" later.  Site
 # administrators may choose to use typical filesystem or database
 # janitorial commands to permanently delete very old job records,
 # or to archive them for later analysis of job histories, etc.
 #
 # The tractor engine performs best when it has high-bandwidth,
 # low-latency access to the files in this directory.
 #
 "TractorDataDirectory":   "/var/spool/tractor",


 # EngineLogFile
 # Specifies the logfile to be used for the engine's own diagnostic logs.
 # use the empty string "" to cause logging to be printed to the terminal.
 #
 #"EngineLogFile": "",
 "EngineLogFile": "${TractorDataDirectory}/engine.log",


 # EngineLogVerbosity
 # Specifies the log severity level threshold.  Recognized values
 # are:  SEVERE, NOTICE, INFO, DEBUG, TRACE
 #
 "EngineLogVerbosity": "NOTICE",


 # Command logging -
 # Storing and retrieving output from commands launched by tractor:
 #
 # The SiteCmdLogServerStartup entry specifies how the python logging
 # server should be started automatically when the engine is started.
 # Use the empty string "" to indicate that the engine should not
 # start a log server.
 #
 "SiteCmdLogServerStartup": "",

    #"'${TractorInstallDirectory}/bin/tractor-cmdlogger' --filetemplate='/logs/%u/J%j/T%t.log' --port=9180",
    #"'${TractorInstallDirectory}/bin/tractor-cmdlogger' --filetemplate='${TractorDataDirectory}/cmd-logs/%u/J%j/T%t.log' --port=9180",


 # The SiteCmdLogRetrievalURL string is sent to UIs giving them a URL
 # at which to retrieve command output logs.
 #
 # The template string can contain substitution patterns as follows:
 #   %u   the job owner's login (userid, string)
 #   %j   the job id (integer)
 #   %t   the task id (integer)
 #
 # Some site configurations will allow UIs to fetch these logs directly
 # from the fileserver where they are stored, such as when another
 # webserver (like Apache) has direct access to the log files. By default,
 # the tractor-engine itself acts as the webserver to deliver the log text
 # to the UI browser, assuming it has access to the actual output logs.
 # The blades are told where to put their logs in blade.config.
 # By default the engine starts a simple python log-receiver subprocess
 # (see SiteCmdLogServerStartup, above), and the default blade.config
 # directs the blades to connect to it for logging.  In that scenario, if
 # the engine is serving up the logs, then the *relative* URL given below
 # is sufficient; the URL does not mention a host.  A UI that is already
 # connected to the engine for UI service will get that URL and use the
 # same host that it queried to fetch the URL.
 #
 # You can specify a different host by including the "http://HOST" prefix
 # explicitly, like this:
 # "SiteCmdLogRetrievalURL": "http://HOST:PORT/tractor/cmd-logs/%u/J%j/T%t.log",
 #
 "SiteCmdLogRetrievalURL": "http://animlog-web.itd.uts.edu.au/tractor-logs/%u/J%j/T%t.log",


 # SiteURLMap is a mapping of inbound URL resource prefixes to
 # on-disk assets.  This is a simple json LIST of string pairs, the
 # first item in each pair is the prefix and the second item is the
 # location.  ORDER IS IMPORTANT in this list, prefixes are tested
 # in the order given, the first matching one is used.  Assets with
 # prefixes that are NOT listed are assumed to lie below /tractor/
 #
 "SiteURLMap": [
    "/tractor/cmd-logs/",   "/Volumes/dabrender/logs/tractor/cmd-logs/",
    "/tractor/dashboard/",  "${TractorDashboardDirectory}/tv/",
    "/tractor/tv/",         "${TractorDashboardDirectory}/tv/",
    "/tv/dabrender/",       "/tv/dabrender/",
    "/dabrender/",          "/dabrender/",
 ],


 # SiteContentTypeMap defines the HTTP Content-Type header that is
 # sent from tractor to web browsers when non-tractor files are loaded,
 # such as image previews or log files.  Some sites may have special
 # browswer plug-ins or registered helper applications that will display
 # a particular filetype automatically if the Content-Type header is
 # set appropriately.  Conversely, setting the type to something that
 # is not recognized by the browswer will often allow the user to
 # choose between downloading the file or launching an application of
 # their own choice.  Tractor also has an internal table of mappings
 # that it uses for common types, if the file extension is not listed
 # here explicitly.
 #
 "SiteContentTypeMap": {
    ".tif":  "image/tiff",
    ".exr":  "image/x-exr",
    ".png":  "image/png",
    ".jpg":  "image/jpeg",
    ".log":  "text/plain"
 },


 # The "maximum list record count" truncates certain
 # list requests from the dashboard to the given value
 # in order to limit the processing time spent by the
 # engine to create the replies as well as to prevent
 # possible javascript crashes in some web browsers
 # when parsing very large reply lists.
 #
 "SiteMaxListReplyCount": 2500,


 # Tractor can accept job descriptions in the Alfred job script format.
 # Alfred required certain quoting and escaping conventions for nested
 # strings within a job script (requiring an extra level of escape
 # characters).  Tractor can either follow the same conventions for
 # use with legacy job generators, or it can accept a simpler quoting
 # style for newer jobs. Use the value "alfred" for alfred compatibility,
 # or the value "tractor" for the simpler scheme.
 #
 "JobScriptQuotingMode": "tractor",


 # DispatchTiers and Job Sorting Policies for Blade Assignment
 #
 # For details see the "Scheduling Modes" documentation:
 # https://renderman.pixar.com/resources/current/tractor/tractor_scheduling.html
 #
 # DispatchTiers -- Each job on the queue is associated with a dispatching tier.
 # Tiers provide the highest level job dispatching control, jobs in high-valued
 # tiers are always considered before those in low-valued tiers.  All submitted
 # jobs are placed in the "default" tier unless explicitly set at spool time.
 # Tier affiliation can be changed manually after submission.
 #
 # Within each tier jobs are sorted by the tier's Scheduling Mode. Modes that
 # start with "P+" always sort jobs first by numerical Priority value, highest
 # to lowest.  Jobs with the same priority are considered in the order produced
 # by the selected policy mode. Modes are summarized here, for more details
 # see the "Scheduling Modes" documentation:
 # https://renderman.pixar.com/resources/current/tractor/tractor_scheduling.html
 #
 # "P+FIFO"    -- First In, First Out. The oldest jobs are considered first.
 #
 # "P+RR"      -- Round-robin cycling. Jobs with long-running tasks tend to
 #                "collect" more blades. P+ATCL+RR is usually better in production.
 #
 # "P+ATCL"    -- Active Task Count Leveling. Balance active task counts across
 #                jobs. Generally tends to favor the oldest jobs when there are
 #                more queued tasks than blades.
 #
 # "P+ATCL+RR" -- similar to P+ATCL, with round-robin cycling to give new jobs
 #                some early processing, and to balance assignments over time by
 #                favoring jobs that have been waiting the longest for blades.
 #
 # "P+CHKPT"   -- A special scheduling policy for jobs participating in a
 #                cooperative checkpoint - yield - resume cycle group.
 #
 # NOTE: EACH TIER CAN HAVE A DIFFERENT SCHEDULING POLICY.  If a tier does
 # not specify a policy, then the "JobSchedulingMode" fallback is used.
 #
"JobSchedulingMode": "P+ATCL+RR",

 "DispatchTiers": {
    "admin":   {"priority": 100.0, "scheduling" : "P+FIFO"},
    "rush":    {"priority":  75.0},
    "preview": {"priority":  60.0, "scheduling" : "P+CHKPT"},
    "default": {"priority":  50.0},
    "batch":   {"priority":  25.0, "scheduling" : "P+ATCL"},
    "low":     {"priority":  10.0, "scheduling" : "P+FIFO"}
 },


 # The SiteHttpOriginAccess setting controls the outbound HTTP protocol
 # reply value for the "Access-Control-Allow-Origin" header line. This
 # setting allows the engine-as-webserver to work within a site's "CORS"
 # policy restrictions.  The default value is "*" (asterisk) for ease of
 # use.  Use the value "" (empty string) to disable CORS-style sharing.
 # This setting will primarily affect the ability of the Tractor Dashboard
 # to fetch command log files when the specified log server hostname is
 # different from the hostname in the URL used to load the Dashboard itself.
 #
 "SiteHttpOriginAccess":  "*",


 # The "AllowJobOwnerOverride" setting controls whether the engine will
 # accept job owner name overrides from job submission scripts. Sometimes
 # it is useful for a submission script running as one user to submit a job
 # on behalf of a different user.  Use the value 1 (one) to allow an alternate
 # owner name to be specified in this way.  Use the value 0 (zero) to disregard
 # any alternate names and instead always use the login name of the spooling
 # process owner (when known).
 #
 "AllowJobOwnerOverride": 1,


 # The "CmdAutoRetryAttempts" and "CmdRetryrcRetryAttempts" settings
 # control the number of automatic attempts made by tractor-engine to
 # retry commands that exit with a non-zero exit status. These automatic
 # retries MAY be a useful workaround at sites that frequently
 # experience command failures due to temporary transient conditions.
 #
 # In some job scripts, certain RemoteCmds are annotated with the
 # "-retryc {5 17 84}" option, where the actual numbers given represent
 # known exit codes from the launched app representing conditions that
 # warrant a retry.  The number of retries attempted in this situation
 # is controlled by CmdRetryrcRetryAttempts below. Set it to zero to
 # disable retryrc retries, or set it to a small integer to allows these
 # retry attempts.
 #
 # The "CmdAutoRetryAttempts" setting is used to control automatic
 # retries on exit codes not listed in a Cmd's -retryrc option, or for
 # any non-zero exit when -retryrc is not specified. Set it to zero to
 # disable these automatic retries, or set it to a small integer to
 # force these retries globablly.
 #
 # The "CmdAutoRetryStopCodes" setting specifies a list of exit codes
 # that will be considered "terminal" and automatic retries will not
 # be considered for commands that exit with these codes. Negative
 # numbers represent unix-style signal (which may differ by platform).
 # For example, commands that exit due to SIGTERM, or SIGKILL on
 # unix-style platforms are typically NOT retried since those signals
 # are almost always due to deliberate external actions intended to
 # actually stop the given task from proceeding. On Windows, Tractor
 # handles UI requests to interrupt a running subprocesses with the
 # system TerminateProcess call; tractor-blade will report these exits
 # using "-15" as a status code processing analogy to SIGTERM. Add the
 # code "-2" to skip retries on SIGINT, though these are not always
 # caused by manual user action. The codes 10111 and 10110 are generated
 # by tractor-blade when a command specifies a strict range for valid
 # elapsed process run time, and that range is exceeded or not reached,
 # respectively; auto retry may not be desirable in that case.
 # Note that StopCodes are ignored when a "retryrc" code matches.
 #
 "CmdAutoRetryAttempts": 3,
 "CmdRetryrcRetryAttempts": 3,
 "CmdAutoRetryStopCodes": [-9, -15, 10110, 10111],



 # EngineWorkerThreads
 # A count of threads to be divided among several roles within the
 # engine process. These are typically devoted to high-latency i/o
 # operations like writing to client transaction sockets. Thread
 # parallelism allows dispatching and UI operations to proceed
 # while replies to prior requests are delivered. Since the threads
 # are mostly used for latency-hiding they typically do not consume
 # a lot of CPU.  Note that the engine also allocates several other
 # required subsystem threads as well, in addition to the "worker"
 # pool count given here.  There are several main internal worker
 # thread pools pre-allocated from this count, and a typical
 # operating value here is 10 + (number_of_blades / 100).  Use
 # the value zero to let the engine pick a default based only
 # on engine core count.
 #
 "EngineWorkerThreads": 0,

 # SpoolHandlerCount
 # This advanced tuning parameter specifies the number of parallel
 # spool-handling subprocesses spawned to handle inbound new jobs and
 # "expand" additions.  The default (zero) produces a small, dynamically
 # selected concurrency count.  It should only be changed to some other
 # value when spooling backlogs grow to unacceptable levels for sustained
 # periods of time, or in unusual deployment situations where the engine
 # and its job database server are not on the same host and are not
 # sharing a common spooling disk.  Values greater than zero establish
 # a fixed number of internal db insertion contexts.
 #
 "SpoolHandlerCount": 0,


 # ListenBacklog - This setting controls the amount of storage devoted
 # to holding unprocessed inbound "connect" requests from TCP clients.
 # These are typically HTTP requests from tractor-blades and Dashboards.
 # The traditional SOMAXCONN compile-time value is too small for modern
 # web servers under load, so a run-time control is necessary. Use the
 # value 0 (zero) to cause tractor-engine to query the operating system
 # for the currently configured maximum listen backlog.  For example,
 #   Linux:    /proc/sys/net/core/somaxconn
 #   Mac OSX:  sysctl kern.ipc.somaxconn
 # Note that an engine restart is required to pick up changes to either
 # the value in this file, or changed system config values.  Also, other
 # coordinated operating system tuning changes are usually required, for
 # example on Linux in /etc/sysctl.conf:
 #    net.ipv4.tcp_max_syn_backlog = 2048
 #    net.core.somaxconn = 1024
 #    net.ipv4.tcp_syncookies = 1
 # then apply these changes with: sysctl -f /etc/sysctl.conf
 #
 "ListenBacklog": 0,

 #
 # "LogLongRunningRequests" controls some additional engine diagnostics
 # related to long-waiting and long-running http requests. The two parameter
 # values are thresholds [WAIT, RUN] that trigger diagnostic entries in the
 # engine log whenever an inbound (or internal) http request exceeds the
 # given wait time or run time, in seconds. Use zero to disable either check.
 #
 "LogLongRunningRequests": [0.0, 5.0],

 # On initial start-up, the engine loads previously spooled jobs from the
 # job database to continue dispatching the unfinished ones.  While loading
 # these jobs, the engine can print a DEBUG-level diagnostic to its log
 # after every N jobs have been loaded.  Set this value to 0 (zero) to
 # suppress these log entries.
 #
 "InitialJobLoadProgressLog": 1000,


 # The site SMTP server may be used by Tractor to deliver important
 # messages to administrators at your site, or in some cases to
 # complete user account creation.  It will connect to the host
 # specified by 'SiteSMPTServer' via smtp protocol to deliver messages.
 # It will use the 'SiteDefaultMainDomain' as a suffix for email
 # addresses that are simple usernames.  For example, given a userid
 # of "eve" and the default empty string for the domain, then mail
 # delivery would simply attempt to use "eve" on the smtp server;
 # if the domain is specified as "buyandlarge.com" then the recipient
 # will be specified as "eve@buyandlarge.com".
 #
 "SiteSMTPServer":          "linus.it.uts.edu.au",
 "SiteDefaultMailDomain":   "uts.edu.au"

}

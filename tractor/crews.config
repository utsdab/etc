{
    #
    # Crews are simply named lists of users:
    #
    #   "the_crew_name":  ["list", "of", "user", "names"],
    #
    # In addition to any site-defined crews, there are four "reserved"
    # crews names used for special purposes by Tractor:
    #   "ValidLogins",  "BannedLogins",  "Wranglers",  "Administrators"
    #
    # The ValidLogins crew enumerates all user's who are allowed to
    # login to Tractor.  This crew MUST exist.  See the note regarding
    # about the meta-names "@syslogins" and "@externlogins" below.
    #
    # The BannedLogins crew lists user names that are explicitly denied
    # login.  It is mostly only useful for providing exceptions when
    # ValidLogins contains either of the meta-names "@syslogins" or
    # "@externlogins".
    #
    #
    # Special Meta-Names: "@syslogins" and "@externlogins"
    #
    # The user name list for a given crew can include either of these
    # special names.  "@syslogins" stands for all user login names
    # that are valid locally on the engine host (i.e. resolvable by
    # the function getpwnam(3)), which frequently includes those
    # resolvable by the site nameservers, such as LDAP or NIS.
    # For example:
    #    "ValidLogins": ["@syslogins"],
    #
    # The name "@externlogins" causes the engine to skip its internal
    # validation of a potential Dashboard user names, and instead the
    # engine passes all login names directly to the site's external
    # trSiteLoginValidator.py script (or whichever validation app is
    # named as the "SitePasswordValidator" below). The external validator
    # can accept or deny a given name+password pair. For example:
    #    "ValidLogins": ["@externlogins"],
    #
    # Note that wildcard characters in user names (e.g. "*") are NOT
    # expanded or treated specially when searching for user access.
    # However, the list of user names can also contain OTHER CREW
    # names, which will be expanded recursively to include the users
    # in those crews.  Crew name references that form "reference loops"
    # will be truncated, but may cause unexpected memberships.
    #
    # Any user name in a crew's membership list whose first character
    # is a minus-sign will be removed from that crew definition,
    # similarly for sub-crew names.  For example:
    #  "ourRestrictedCrew": ["ourBigCrew", "-knownMiscreants"],
    #
    # Crews that are referenced in name lists can be denoted with
    # a leading "$" in order to make them clearly distinguished as
    # crew names rather than user names.  This approach also allows
    # tractor-engine to issue better diagnostic messages when a
    # referenced crew is unknown -- otherwise than name is just
    # treated as another user name.  For example:
    #   "theLuncheon": ["terry", "vandana", "$theGuysFromShipping"],
    #
    # A particular user name may appear in more than one crew.
    #

######################################################
"Crews": {

"Staff":[
"129544", # 129544 petethomson staff
"124474", # 124474 zarvankotwal 2016
"117481", # 117481 mauricegiacomini staff
"dataarena", # dataarena dataarena staff
"mav",    # mav staff
"910533", # 910533 stephengowing staff
],

"Admin":[
"120988", # 120988 matthewgidney staff
],

"MAV_Students":[],

"DAB_Alumni":[],

"DAB_Masters":[],

"DAB_Students":[
"11993185", # 11993185 evangelinemhilliar  2014
"99117653", # 99117653 lorandgolebiowski1  2014
"11980493", # 11980493 lesterchan  2014
"11982840", # 11982840 jodieaustin 2014
"12003772", # 12003772 ellevnguyen 2014
"98037284", # 98037284 sophiabarkermoore 2014
"98113335", # 98113335 vivianzhao 2014
"99139762", # 99139762 denisehlam 2014
"12044552", # 12044552 ngochiencnguyen 2014
"11673795", # 11673795 yanlingliu1 2014
"98034111", # 98034111 sydneyliao 2014
"99129583", # 99129583 shaunsun 2014
"99126892", # 99126892 yanlin6 2014
"99127134", # 99127134 taylacolley 2014
"99124859", # 99124859 ellikbyrne 2015
"11221278", # 11221278 oscarrnimmo 2014
"12110019", # 12110019 yorienarpati 2014
"12010942", # 12010942 deborahaalbers 2014
"12011654", # 12011654 susannawang 2014
"12012631", # 12012631 jamiehuang 2012
"12014318", # 12014318 himadrisbhakta 2014
"12014561", # 12014561 joshkeam 2012
"12016263", # 12016263 chicorequieron 2014
"12018166", # 12018166 denaaahmed 2012
"12023103", # 12023103 christophergong 2014
"12023141", # 12023141 ninakimurabudzyniak 2014
"12023356", # 12023356 annehuynh 2014
"12023685", # 12023685 jackhuskinson 2012
"12023711", # 12023711 timothydbywater 2014
"12025247", # 12025247 adriennegbolina 2014
"12026516", # 12026516 jessicaaraullo 2014
"12028534", # 12028534 abbasismail 2014
"12028837", # 12028837 woojinjennyjlee 2014
"12031086", # 12031086 chinyerecakole 2014
"12033039", # 12033039 aliciajaneef 2012
"12034512", # 12034512 emilykcheung 2012
"12043360", # 12043360 seandwyer 2014
"12043701", # 12043701 michellelam 2014
"12043838", # 12043838 hungpham1 2014
"12043891", # 12043891 craiglcampbell 2014
"12044210", # 12044210 catherineyates 2014
"12044309", # 12044309 andrewzwilson 2014
"12044374", # 12044374 lucyrwu 2014
"12044552", # 12044552 ngochiencnguyen 2016
"12071318", # 12071318 maryanngayed1 2014
"12071472", # 12071472 valeriaversace1 2012
"12071522", # 12071522 anthonycharbelsukkar1 2014
"12130403", # 12130403 joshuaztan 2016
"12204816", # 12204816 haoyang5 2016
"12222485", # 12222485 natalielkirk 2012
"12529448", # 12529448 marielatijerinacabrera 2012
"12539437", # 12539437 markgwoszczalski 2012
"12692430", # 12692430 kristargoll 2016
"97103485", # 97103485 sunjlee1 2016
"98031711", # 98031711 weeptan 2016
"98040140", # 98040140 thomasmcdonell 2016
"98073582", # 98073582 tahirahusain 2016
"98080359", # 98080359 erikarju 2016
"98102597", # 98102597 tahliajpearce 2016
"98126939", # 98126939 jacobchantarat 2016
"98126954", # 98126954 samuelbennettlowe 2016
"98129671", # 98129671 sandyxinwilliams 2016
"98129808", # 98129808 sophiebooth 2016
"98129846", # 98129846 trucqhuynh 2016
"98130127", # 98130127 jacksonahall 2016
"98131131", # 98131131 luanelqin 2016
"98133628", # 98133628 rosamundmhooper 2016
"98134240", # 98134240 brycepemberton 2016
"98134428", # 98134428 kimberleygriffin 2016
"98136435", # 98136435 charlottermccarthy 2016
"98138136", # 98138136 joshuaso 2016
"98138288", # 98138288 katrinacalingo1 2016
"99104224", # 99104224 xiaohuanhe 2016
"99112753", # 99112753 kazukikomatsu 2016
"99115608", # 99115608 quynhtutruong 2012
"99126031", # 99126031 shannonrkovats 2016
"99126649", # 99126649 kylebrenchvillarama 2016
"99128302", # 99128302 daniellerlylestirling 2016
"99128581", # 99128581 francoesquerrepinto1 2016
"99128617", # 99128617 jenniferlucero 2016
"99129583", # 99129583 shaunsun 2016
"99131500", # 99131500 rhysblinco 2016
"99132944", # 99132944 joshuamckay 2016
"99139762", # 99139762 denisehlam 2016
"99141855", # 99141855 jasmineclee 2016
"99142097", # 99142097 catherinemcclean 2016
"99143620", # 99143620 ryantdrewett 2016
"10830368", # 10830368 paulrhodes 2012
"11031046", # 11031046 chantellelalbion 2012
"11215961", # 11215961 leonieherson 2013
"11371883", # 11371883 haemlee 2012
"11396684", # 11396684 steffiesyee 2012
"11397130", # 11397130 michaeljmascarenas 2012
"11413251", # 11413251 jessicagoddard 2012
"11413984", # 11413984 kerlgalindo 2012
"11416385", # 11416385 shawnvincent 2012
"11543612", # 11543612 yisun6 2016
"11558549", # 11558549 zhanyehuang1 2013
"11559820", # 11559820 yangsushan1 2013
"11613508", # 11613508 xinyuzhang5 2016
"11660836", # 11660836 yihanzhang1 2016
"11668365", # 11668365 helinzheng1 2013
"11684026", # 11684026 kylieysun 2012
"11688621", # 11688621 stephanieadavidson 2013
"11689217", # 11689217 jasminrasiah 2013
"11689775", # 11689775 lesterpcarreon 2014
"11691906", # 11691906 darrylraltan 2013
"11693468", # 11693468 alyshachua 2013
"11693660", # 11693660 elladsanderson 2014
"11699865", # 11699865 albertjeung 2013
"11701632", # 11701632 moniquebryson 2013
"11706773", # 11706773 richardchhoa 2013
"11708892", # 11708892 lucyausien 2013
"11710934", # 11710934 soheeapark 2013
"11715481", # 11715481 laurawingrove 2013
"11723069", # 11723069 nicholassefton 2013
"11723210", # 11723210 jonathansdelbridge 2013
"11724756", # 11724756 victoriadinh 2013
"11741966", # 11741966 yinxia 2013
"11757503", # 11757503 conorastack 2014
"11758113", # 11758113 yeongyeongcha 2013
"11848557", # 11848557 georgette 2014
"11900065", # 11900065 yangleiwu1 2012
"11900089", # 11900089 yenchiaochiu 2014
"11904671", # 11904671 xinjiang6 2014
"11906916", # 11906916 hoangtnguyen4 2016
"11909429", # 11909429 huanxinchen1 2014
"11910736", # 1910736 shuangliang2 2016
"11965062", # 11965062 yuanzhenliu 2014
"11980543", # 11980543 ryleyjmiller 2014
"11981925", # 11981925 nasyadjaja 2016
"11982333", # 11982333 jamesnevell 2014
"11982903", # 11982903 chloespizarro 2014
"11984679", # 11984679 fabianmorison 2014
"11985835", # 11985835 isabelleleggat 2014
"11988348", # 11988348 nathankhamdara 2014
"11989492", # 11989492 jacktea 2014
"11993502", # 11993502 jessicazhuang 2014
"11995444", # 11995444 ianlade 2014
"11996749", # 11996749 dianaluu 2014
"11998301", # 11998301 nicholaslciantar 2013
"11999176", # 11999176 isabellafspagnolo 2014
"12000079", # 12000079 madisonsalier 2014
"12003620", # 12003620 karenpan 2014
"12007629", # 12007629 giselenour 2014
],

"ValidLogins"   : ["@syslogins", "$Admin", "$MAV_Students", "$DAB_Students", "$Staff", "$DAB_Alumni", "$DAB_Masters"],
"BannedLogins"  : [ ],
"Wranglers"     : [ "$Admin", "$MAV_Students", "$DAB_Students", "$Staff", "$DAB_Alumni", "$DAB_Masters"],
"Administrators": [ "$Admin", "120988"]
},
#######################################################

    #
    # --------------------
    # Job Edit Permissions
    # --------------------
    # By default, everyone with a valid login is given "standard"
    # permissions, meaning the basic ability to run and modify their
    # own jobs and to view the state of the queue and the blades.
    # Users listed in the "Wranglers" crew are also allowed to alter
    # the general job queue, including the state of other user's jobs.
    # Users listed in the "Administrators" crew are allowed to change
    # site-wide policies through the URL interface.  The permission
    # levels are cumulative:  Wranglers have "standard" access plus the
    # additional wrangler permissions.  Administrators have standard,
    # wrangler, and admin access.
    #
    # The optional subdictionary "JobEditAccessPolicies" can be used
    # to further restrict or extend edit access to job attributes, such
    # as job priority.  A different access list can be specified for each
    # editable attribute, otherwise the settings for the entry named
    # "default" will apply. The special meta-crew name "@owner" in these
    # edit lists grants each job owner the permission edit the given
    # attribute in their own jobs.
    #
    # Edit permissions are organized into named "policies" with the one
    # named "defaultPolicy" applied by default.  Job scripts can specify
    # the policy that applies to them using the "Job -editpolicy {NAME}"
    # option.  Typically this is used by a studio's job creation pipeline
    # to apply additional restrictions on jobs from particular shows or
    # administrative jobs.  In cases where the job's specifically requested
    # policy is missing here, then the engine applies the settings from the
    # "defaultPolicy" entry, if it exists, rather than denying all edits
    # until the missing policy becomes defined.  Users in the Administrators
    # crew will always have edit control over any job.
    #
    # The recogonized fine-grained edit permission keywords include:
    #
    #   argv, afterjids, aftertime, bnotes, jnotes, comment, crews,
    #   cwd, delete, envkey, interrupt, jrestart, jshuffle, lock,
    #   metadata, maxactive, pause, priority, retract, retry,
    #   runsecsbounds, service, skip, slotbounds, tags, title
    #
    # In most cases the editable attributes are controlled by a key name
    # below that is the same as the attribute name, as listed by the command:
    # "tq attributes job"
    #

"JobEditAccessPolicies": {
    # Note:  don't forget commas after each entry!

        "defaultPolicy": {
            "priority": ["Administrators"],
            "projects": ["Administrators"],
            "crews":    ["Administrators"],
            "tags":     ["Administrators"],
            "tier":     ["Administrators"],
            "retract":  ["Wranglers", "Administrators"],
            "delete":   ["Administrators"],
            "metadata": ["Administrators"],
            "skip":     ["Wranglers", "Administrators"],
            "jrestart": ["Wranglers", "Administrators"],
            "pause":    ["Wranglers", "Administrators"],
            "interrupt":["Wranglers", "Administrators"],
            "envkey":   ["Wranglers", "Administrators"],
            "service":  ["Wranglers", "Administrators"],
            "cwd":      ["Wranglers", "Administrators"],
            "argv":     ["Administrators"],
            "retry":    ["Wranglers", "Administrators"],
            "interrupt":["Wranglers", "Administrators"],
            "pause":    ["Wranglers", "Administrators"],
            "afterJids":["Wranglers", "Administrators"],
            "afterTime":["Wranglers", "Administrators"],
            "title":    ["Administrators"],
            "default":  ["@owner", "Wranglers", "Administrators"]
        },

        "MAVPolicy": {
            "priority": ["Wranglers", "Administrators"],
            "tier":     ["Wranglers", "Administrators"],
            "delete":   ["Wranglers", "Administrators"],
            "metadata": ["Wranglers", "Administrators"],
            "skip":     ["Wranglers", "Administrators"],
            "jrestart": ["Wranglers", "Administrators"],
            "pause":    ["Wranglers", "Administrators"],
            "interrupt":["Wranglers", "Administrators"],
            "title":    ["Wranglers", "Administrators"],
            "default":  ["Administrators"]
        },

        "DABPolicy": {
            "priority": ["Wranglers", "Administrators"],
            "tier":     ["Wranglers", "Administrators"],
            "delete":   ["Wranglers", "Administrators"],
            "metadata": ["Wranglers", "Administrators"],
            "skip":     ["Wranglers", "Administrators"],
            "jrestart": ["Wranglers", "Administrators"],
            "pause":    ["Wranglers", "Administrators"],
            "interrupt":["Wranglers", "Administrators"],
            "title":    ["Wranglers", "Administrators"],
            "default":  ["Administrators"]
        }
    },

    #
    # ---------------------
    # SitePasswordValidator
    # ---------------------
    # "SitePasswordValidator" specifies a validation scheme for passwords
    # sent to the engine from user interfaces and scripts.  Use an empty
    # string "" to disable password checking, allowing any valid user
    # name to proceed as a client (the names authorized in ValidLogins).
    #
    # Any non-empty value for "SitePasswordValidator" will cause
    # passwords to be required, and specifies the type of validation
    # that will be applied.  All user+password validation occurs on
    # the tractor-engine host, so values here are relative to the
    # engine's environment, filesystem, operating system, etc.
    #
    # Tractor engine has built-in support for the "PAM" authentication
    # system provided by Linux and Mac OS.  Only the engine needs this
    # support, clients can be on any platform.  Use the string value
    # "internal:PAM" below to enable password validation through the
    # PAM modules on your engine host.
    #
    # The PAM scheme itself requires you to choose an appropriate access
    # policy module (see /etc/pam.d or /etc/pam.conf).  Tractor will
    # attempt to load a module named "tractor" by default, and you must
    # define that module first, using appropriate policies for your site.
    # Alternatively, you can specify a different PAM module name here,
    # one that may already exist and support your site's requirements.
    # For example to get the "su" authentication rules, use "internal:PAM:su"
    # below.
    #
    # Tractor-engine sends a session cookie to the dashboard web browser
    # after you authenticate with a password. The saved session information
    # can be used later for automatic login when a fresh dashboard page is
    # reloaded. This auto-login behavior can be disabled, forcing users to
    # reenter their passwords when the dashboard page is reloaded, by
    # changing the prefix in the SitePasswordValidator setting; change
    # "internal:" to "internal_nocookie:", or add the prefix
    # "external_nocookie:" for external validation scripts.
    #
    # **NOTE** The PAM approach requires tractor-engine to present a
    # clear-text password to the PAM interface, thus it must receive a
    # recoverable password encoding from the Dashboard and client scripts.
    # The built-in transfer encoding provides modest protection from
    # snooping, but your principal password transport protection is
    # expected to come from the security of your site's private LAN and
    # VPN connections into it.
    #
    # Tractor also supports a more involved custom alternative solution
    # in which you provide your own client-side one way password hashing
    # plug-in (javascript or python, as appropriate), and a matching
    # engine-side hash validator that you name here.  See the comments
    # in the template examples, and the Tractor administrative docs for
    # more details.
    #

"SitePasswordValidator": ""

    # "SitePasswordValidator": "internal:PAM:tractor"
    # "SitePasswordValidator": "internal:PAM:su"
    # "SitePasswordValidator": "internal_nocookie:PAM:su"

    # "SitePasswordValidator": "python ${TractorConfigDirectory}/trSiteLoginValidator.py",
    # "SitePasswordValidator": "python ${TractorConfigDirectory}/trSiteLdapLoginValidator.py"

}


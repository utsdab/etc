#!/bin/bash
#
# This profile is the second step in a bootstrap for the environment needed in a shell
# This script is sources at the end of /etc/profile.d/dabanim.sh
# It requires some initial vairables to be set DABRENDER AND DABDEV


echo ""
echo "STARTING: ${BASH_SOURCE}"
echo "VERSION: 2018-03-19"
echo "USER: ${USER}"
export PATH="/usr/X11R6/bin:${PATH}"

#
# Function helper
#
#

checkpath () {
    # check to see if a string is a valid directory of file
    # exxpect a path as a string
#    echo $1
    if [ -d ${1#$} ]; then
        echo "CHECK   : ${1} SEEMS TO BE THERE"
        return 0
    else
        echo "CRITICAL: Cant see ${1}"
        return 1
    fi
}

if checkpath ${DABRENDER} ; then
    echo "CHECK   : DABRENDER SEEMS TO BE THERE ${DABRENDER}"
else
    echo "CRITICAL: Cant see DABRENDER ${DEBRENDER}"
    exit 1
fi

# DEV or PRODUCTION #####################
if [ ${DABDEV} ]; then
    echo ">>>>>>>>> DEVELOPMENT: Using the development paths"
    _dabusr="${DABDEV}/usr"
    _dabetc="${DABDEV}/etc"
    _dabsww="${DABDEV}/sww"
    _dabwork="${DABRENDER}/work"
    _dabassets="${DABRENDER}/assets"
    _dabprefs="${DABRENDER}/prefs"
    _dabuserprefs="${DABRENDER}/prefs/user_prefs"
else
    echo "PRODUCTION: Using the studio paths"
    _dabusr="${DABRENDER}/usr"
    _dabetc="${DABRENDER}/etc"
    _dabsww="${DABRENDER}/sww"
    _dabwork="${DABRENDER}/work"
    _dabassets="${DABRENDER}/assets"
    _dabprefs="${DABRENDER}/prefs"
    _dabuserprefs="${DABRENDER}/prefs/user_prefs"
fi

######### DABUSR - plugins and scripts and tool extension
if [ -d ${_dabusr} ]; then
    export DABUSR="${_dabusr}"
    echo "INFO    : DABUSR = ${DABUSR}"
else
    echo "CRITICAL: Cant set DABUSR correctly ${_dabusr}"
    unset DABUSR
fi

######### DABETC - configurations and licenses
if [ -d ${_dabetc} ]; then
    export DABETC="${_dabetc}"
    echo "INFO    : DABETC = ${DABETC}"
else
    echo "CRITICAL: Cant set DABETC correctly ${_dabetc}"
    unset DABETC
fi

######## DABSWW - software and scripts
if [ -d ${_dabsww} ]; then
    export DABSWW="${_dabsww}"
    echo "INFO    : DABSWW = ${DABSWW}"
else
    echo "CRITICAL: Cant set DABSWW correctly ${_dabsww}"
    unset DABSWW
fi

######### DABWORK - the main work area
if [ -d ${_dabwork} ]; then
    export DABWORK="${_dabwork}"
    echo "INFO    : DABWORK = ${DABWORK}"
else
    echo "CRITICAL: Cant set DABWORK correctly ${_dabwork}"
    unset DABWORK
fi

######### DABASSETS - an asset library hook
if [ -d ${_dabassets} ]; then
    export DABASSETS="${_dabassets}"
    echo "INFO    : DABASSETS = ${DABASSETS}"
else
    echo "CRITICAL: Cant set DABASSETS correctly ${_dabassets}"
    unset DABASSETS
fi

######### DABPREFS  this is a place for general preferences to be centrally (in lieu of a home directory)
if [ -d ${_dabprefs} ]; then
    export DABPREFS="${_dabprefs}"
    echo "INFO    : DABPREFS = ${DABPREFS}"
else
    echo "CRITICAL: Cant set DABPREFS correctly ${_dabprefs}"
    unset DABPREFS
fi

######### DABUSERPREFS  this is a place for user preferences to be centrally (in lieu of a home directory)
if [ -d ${_dabuserprefs} ]; then
    export DABUSERPREFS="${_dabuserprefs}"
    echo "INFO    : DABUSERPREFS = ${DABUSERPREFS}"
else
    echo "CRITICAL: Cant set DABUSERPREFS correctly ${_dabuserprefs}"
    unset DABUSERPREFS
fi

######### MAYA_APP_DIR  this is a place for user preferences to be centrally (in lieu of a home directory)
# config is normally a link to the current CONFIG_vXX with mayaprefs inside
_MAYA_APP_DIR="${DABUSERPREFS}/${USER}/config/mayaprefs"
if [ -d ${_MAYA_APP_DIR} ]; then
    export MAYA_APP_DIR="${_MAYA_APP_DIR}"
    echo "INFO    : MAYA_APP_DIR = ${MAYA_APP_DIR}"
else
    echo "WARNING: Cant set MAYA_APP_DIR correctly as ${_MAYA_APP_DIR}"
    unset MAYA_APP_DIR
fi


#  DEV OR PRODUCTION  VERSIONS   #########################
if [ ${DABDEV} ]; then
    echo ">>>>>>>>> DEVELOPMENT: Using the development paths"
    echo "INFO    : BASIC SHELL INITIALIZATION SETTINGS"
    export MAYA_VERSION="2018"
    echo "INFO    : MAYA VERSION   : $MAYA_VERSION"
    export RMAN_VERSION="22.4"
    echo "INFO    : RMAN_VERSION   : $RMAN_VERSION"
    export TRACTOR_VERSION="2.3"
    echo "INFO    : TRACTOR_VERSION: $TRACTOR_VERSION"
    export NUKE_VERSION="11.3v1"
    echo "INFO    : NUKE_VERSION   : $NUKE_VERSION"
    echo "INFO    : OS             : ${OSTYPE:0:5}"
else
    echo "PRODUCTION: Using the studio paths - to use dev set DABDEV to the path of the repos"
	echo "INFO    : BASIC SHELL INITIALIZATION SETTINGS"
	export MAYA_VERSION="2018"
	echo "INFO    : MAYA VERSION   : $MAYA_VERSION"
	export RMAN_VERSION="22.4"
	echo "INFO    : RMAN_VERSION   : $RMAN_VERSION"
	export TRACTOR_VERSION="2.3"
	echo "INFO    : TRACTOR_VERSION: $TRACTOR_VERSION"
	export NUKE_VERSION="11.3v1"
	echo "INFO    : NUKE_VERSION   : $NUKE_VERSION"
	echo "INFO    : OS             : ${OSTYPE:0:5}"
fi

############  OS TYPE  ##############
case ${OSTYPE:0:5} in
linux)
    export RMANTREE="/opt/pixar/RenderManProServer-${RMAN_VERSION}"
    export RFMTREE="/opt/pixar/RenderManForMaya-${RMAN_VERSION}"
    export TRACTOR_LOCATION="/opt/pixar/Tractor-${TRACTOR_VERSION}"
    export ARNOLD_LOCATION="/opt/solidangle/mtoa/${MAYA_VERSION}"
    export MAYA_APPLICATION_LOCATION="/usr/autodesk/maya${MAYA_VERSION}"
    export MAYA_LOCATION="${MAYA_APPLICATION_LOCATION}"
    export HOUDINI_LOCATION="/opt/sidefx"
    export HFS="${HOUDINI_LOCATION}"
#    export NUKE_INSTALL_PATH="/opt/foundry/${NUKE_VERSION}"
#    export NUKE_LOCATION="/opt/foundry/${NUKE_VERSION}"
    ;;
darwi)
    export RMANTREE="/Applications/Pixar/RenderManProServer-${RMAN_VERSION}"
    export RFMTREE="/Applications/Pixar/RenderManForMaya-${RMAN_VERSION}"
    export TRACTOR_LOCATION="/Applications/Pixar/Tractor-${TRACTOR_VERSION}"
    export ARNOLD_LOCATION="/Applications/solidangle/mtoa/${MAYA_VERSION}"
    export MAYA_APPLICATION_LOCATION="/Applications/Autodesk/maya${MAYA_VERSION}"
    export MAYA_LOCATION="${MAYA_APPLICATION_LOCATION}/Maya.app/Contents"
    export MAYA_RENDER_DESC_PATH="${ARNOLD_LOCATION}/arnoldRenderer.xml:${MAYA_RENDER_DESC_PATH}"
    export HOUDINI_LOCATION="/Applications/Houdini"
    export HFS="${HOUDINI_LOCATION}/Current/Frameworks/Houdini.framework/Versions/Current/Resources"
#    export NUKE_INSTALL_PATH="/Applications/Nuke${NUKE_VERSION}"
#    export NUKE_LOCATION="${NUKE_INSTALL_PATH}/Nuke${NUKE_VERSION}.app"
#    export NUKE_TEMP_DIR="/var/tmp/nuke-${USER}"
#    export PATH="${NUKE_LOCATION}/Contents/MacOS:${PATH}"
    export PATH="/usr/aw/COM/bin:/usr/aw/COM/etc:${PATH}"
    export PATH="/Applications/RV64.app/Contents/MacOS:${PATH}"
    ;;
*)
    echo "WARNING:   LIBRARY_PATH and base environment NOT set in profile.d/dabanim.sh"
    ;;
esac

# SIDEFX SETUP ###################
export HFS="${HOUDINI_LOCATION}/Current/Frameworks/Houdini.framework/Versions/Current/Resources"
 cd $HFS
 source houdini_setup
 cd ~

# PIXAR SETUP ####################
#  DABRENDER is set in /etc/profile.d/dabanim.sh and is OS aware
#  Not entirely sure what the difference between RDIR and RMS_SCRIPT_PATHS is
#export RMS_SCRIPT_PATHS="${DABETC}/pixar/config"
#export RDIR="${DABETC}/pixar/config"     ####  appeard to be obsolete
#export PIXAR_LICENSE_FILE="${DABETC}/pixar/pixar.license"
#export RMAN_ASSET_LIBRARY="${DABASSETS}/RenderManAssetLibrary"
#export RMAN_ASSET_LIBRARY=$RMANTREE/lib/RenderManAssetLibrary
export RFM_SITE_PATH="${DABETC}/pixar"
export RFM_SHOW_PATH="${DABETC}/pixar"
export TRACTOR_USER="${USER}"
export TRACTOR_ENGINE="tractor-engine:5600"

# FOUNDRY SETUP ##################
export foundry_LICENSE="${DABETC}/foundry/foundry_license.lic"
export NUKE_PLUGIN_PATH=""

# AUTODESK SETUP #################
export RV_LICENSE_FILE="${DABETC}/tweak/license.gto"
export TWEAK_LICENSE_FILE="${DABETC}/tweak/license.gto"
export MU_MODULE_PATH="${DABUSR}/etc/tweak/mu"
export SGTK_DESKTOP_CONFIG_LOCATION="${DABPREFS}/shotgun/toolkit_configs"
export SGTK_PREFERENCES_LOCATION="${DABPREFS}/shotgun/toolkit_configs"
export SHOTGUN_BUNDLE_CACHE_FALLBACK_PATHS="${DABPREFS}/shotgun/toolkit_configs"
export SHOTGUN_PATH_MAC="${DABWORK}/shotgun_work"
#export solidangle_LICENSE="${DABETC}/solidangle/solidangle_license.lic"
export ARNOLD_PLUGIN_PATH="${ARNOLD_LOCATION}/shaders"
export MTOA_TEMPLATES_PATH="" # is for the Attribute Editor (AE) templates of Arnold shaders.
export MTOA_EXTENSIONS_PATH="" # is for MtoA extensions like Yeti.
export MAYA_CUSTOM_TEMPLATE_PATH="" # is for Node Editor templates for Arnold shaders.
export MTOA_STARTUP_LOG_VERBOSITY=""  # sets the MtoA log verbosity during startup: 1 for Errors and Warnings, 2 for Errors, Warnings, and Info, 3 for all
export MTOA_LOG_PATH="/var/tmp" # default location for Arnold log files.
export MAYA_PRESET_PATH="${DABUSR}/etc/maya/dab_presets"
export MAYA_SHELF_PATH="${DABUSR}/etc/maya/dab_shelves"
export MAYA_SCRIPT_PATH="${DABUSR}/etc/maya/dab_scripts"
export MAYA_PLUG_IN_PATH="${DABUSR}/etc/maya/dab_plug-ins"
export MAYA_RENDER_DESC_PATH="$RFMTREE/etc"
export MAYA_MAC_SET_UMASK=0
export MAYA_DISABLE_CIP=1
export RFM_DO_NOT_CREATE_MODULE_FILE=1
export XBMLANGPATH="${DABUSR}/maya/dab_icons/%B:${RFMTREE}/icons/%B:${XBMLANGPATH}"

# SIDEFX ###################
export SESI_LMHOST = 138.25.185.34  # according to side fx - need to open ports 1714 and 1715



######################## BUILDING PATHS #########################
echo "PATH    : appending....."
_paths=( \
            "${DABUSR}/bin" \
            "${MAYA_LOCATION}/bin" \
            "${DABUSR}/etc/tractor" \
            "${DABSWW}/renderfarm/bin" \
            "${RMANTREE}/bin" \
            "${TRACTOR_LOCATION}/bin" \
            "${ARNOLD_LOCATION}/bin" \
             )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export PATH="${i}:${PATH}"
        echo "        : ${i}"
    else
        echo "WARNING: Cant add ${i} to PATH"
    fi
done


# BUILDING PYTHONPATH ####################
echo "PYTHONPATH: appending....."
_paths=( \
            "${MAYA_LOCATION}/Frameworks/Python.framework/Versions/Current/lib/python2.7/site-packages" \
            "${TRACTOR_LOCATION}/lib/python2.7/site-packages" \
            "${RFMTREE}/scripts" \
            "${DABSWW}" \
            "${DABUSR}/etc/tractor" \
            "${DABUSR}/etc/maya/dab_scripts" \
            "${DABUSR}/etc/maya/dab_plug-ins" \
            )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export PYTHONPATH="${i}:${PYTHONPATH}"
        echo "        : ${i}"
    else
        echo "WARNING: Cant add ${i} to PYTHONPATH"
    fi
done


# BUILDING NUKE_PATH ########################
echo "NUKE_PATH: appending....."
_paths=( \
            "${DABUSR}/etc/nuke/tractorNuke" \
            )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export NUKE_PATH="${i}:${NUKE_PATH}"
        echo "         : ${i}"
    else
        echo "WARNING: Cant add ${i} to NUKE_PATH"
    fi
done


# BUILDING MAYA_PLUG_IN_PATH #################
echo "MAYA_PLUG_IN_PATH: appending....."
_paths=( \
            "${DABUSR}/etc/maya/dab_plug-ins" \
            "${RFMTREE}/plug-ins" \
            "${MAYA_APPLICATION_LOCATION}/plug-ins" \
            )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export MAYA_PLUG_IN_PATH="${i}:${MAYA_PLUG_IN_PATH}"
        echo "        : ${i}"
    else
        echo "WARNING: Cant add ${i} to MAYA_PLUG_IN_PATH"
    fi
done


# BUILDING MAYA_SCRIPT_PATH ###################
echo "MAYA_SCRIPT_PATH: appending....."
_paths=( \
            "${DABUSR}/etc/maya/dab_scripts" \
            "${RFMTREE}/scripts" \
            )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export MAYA_SCRIPT_PATH="${i}:${MAYA_SCRIPT_PATH}"
        echo "        : ${i}"
    else
        echo "WARNING: Cant add ${i} to MAYA_SCRIPT_PATH"
    fi
done


# BUILDING MAYA_MODULE_PATH #####################
echo "MAYA_MODULE_PATH: appending....."
_paths=( \
            "${DABUSR}/etc/maya/dab_modules" \
            "${RFMTREE}/etc" \
            )
for i in "${_paths[@]}"
do
    if [ -d ${i} ]; then
        export MAYA_MODULE_PATH="${i}:${MAYA_MODULE_PATH}"
        echo "        : ${i}"
    else
        echo "WARNING: Cant add ${i} to MAYA_MODULE_PATH"
    fi
done


export XBMLANGPATH="${DABUSR}/maya/dab_icons/%B:${RFMTREE}/icons/%B:${XBMLANGPATH}"
export MAYA_PRESET_PATH="${DABUSR}/etc/maya/dab_presets"
export RMAN_ASSET_LIBRARY="${DABASSETS}/RenderManAssetLibrary"
export MAYA_SHELF_PATH="${DABUSR}/etc/maya/dab_shelves"
export MAYA_MAC_SET_UMASK=0
export MAYA_DISABLE_CIP=1
export MAYA_RENDER_DESC_PATH="${RFMTREE}/etc"


## removes duplicates
#export PATH="$(echo "$PATH" |gawk 'BEGIN{RS=":";}
#{sub(sprintf("%c$",10),"");if(A[$0]){}else{A[$0]=1;
#printf(((NR==1)?"":":")$0)}}')";


###########################  ALIAS's
alias nukex='Nuke${NUKE_VERSION} --nukex'
alias nukestudio='Nuke${NUKE_VERSION} --studio'
alias nuke='Nuke${NUKE_VERSION}'
#alias maya='maya'
alias tqd='tq --engine tractor-engine:5600'
alias myprefs='open `myprefs.py`'
alias mywork='open `mywork.py`'


##########################
echo "ENDING  : ${BASH_SOURCE}"
echo ""

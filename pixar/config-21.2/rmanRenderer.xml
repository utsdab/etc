<?xml version="1.0" ?>
<!--
  Top level tag, mandatory:
	<renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
	<melheader>: "s" is a mel script executed just after the file is read 
	<meltrailer>: "s" is a mel script executed after all flags are converted
		to mel. Should contain at least the rendering command.

  Other tags:
	<sep>: "desc" produces a line in the help. Blank if desc is missing.
	<attr>: produces a setAttr line.
		"n" is the flag name.
		"s" the attribute name.
		"t" the parameter type, used in help description.
		"h" the help description.
	<attrString>: produces a setAttr line for a string attribute.
		Same parameters as <attr>, but for string attributes.
	<mel>: Calls a mel script.
		"n" is the flag name.
		"p" the number of parameters.
		"s" the string defining the action %1 ... %p are replaced with values
				read after the flag.
		"t" the parameter types, used in help description.
		"h" the help description.

-->

<renderer desc='RenderMan renderer'>
<melheader s='if (!`pluginInfo -q -l RenderMan_for_Maya`) {loadPlugin
RenderMan_for_Maya;} rmanCreateAllGlobalsNodes();string $rl=""; string
$rp=""; string $spoolmode=""; int $chunksize=100; int $rib=0; int
$ui=0; string $renderer="renderManRIS"; string
$globals="renderManRISGlobals";' />
<meltrailer s='setMayaSoftwareLayers($rl, $rp);
setCurrentRenderer($renderer);
renderManExecCmdlineRender($spoolmode, $chunksize, $rib, $ui);' />

<sep />

<sep desc='All purpose flags:' />
<mel n='ris' p='0' s='$renderer = "renderManRIS"; $globals = "renderManRISGlobals"'/>
<sep desc='                     Render with RenderMan'/>
<mel n="setAttr" p='2' t='string string' 
     s='rmanSetGlobalAttr "%1" "%2";' />
<sep desc='                     This flag can be used to set any of the global attributes'/>
<sep desc='                     listed in RenderMan_for_Maya.ini.  It takes a name value'/>
<sep desc='                     pair.  Attribute values which have multiple data elements'/>
<sep desc='                     should be surrounded by quotes.  The flag can be used'/>
<sep desc='                     multiple times.  Example:'/>
<sep desc='                         Render -r rman -setAttr dice:micropolygonlength 5'/>
<sep desc='                                        -setAttr PixelSamples "3 3"'/>
<sep desc='                                        -setAttr motionBlur 1'/>
<sep desc='                                        -setAttr Format:resolution "320 240"'/>
<sep desc='                                        filename'/>

<mel n="setPref" p='2' t='string string' 
     s='rman setPref "%1" "%2";' />
<sep desc='                     This flag can be used to set any of the preferences '/>
<sep desc='                     listed in RenderMan_for_Maya.ini.  It takes a name value'/>
<sep desc='                     pair.  Attribute values which have multiple data elements'/>
<sep desc='                     should be surrounded by quotes.  The flag can be used'/>
<sep desc='                     multiple times.  Example:'/>
<sep desc='                         Render -r rman -setPref BatchCompileMode zealous'/>
<sep desc='                                        filename'/>

<sep desc="General purpose flags:" />

<mel n="rd" p='1' t='path' 
     s='rmanSetImageDir "%1";'
     h='Directory in which to store image files' />
<mel n="fnc" s='rmanSetFileNameConvention "%1"' p="1" t="string"
     h="File Name Convention:\n
	                                 name, name.ext, name.#.ext, name.ext.#\n
                                  name.#, name#.ext, name_#.ext\n
                               As a shortcut, numbers 1, 2, ... can be used"/>
<attrString n='im' s='defaultRenderGlobals.imageFilePrefix' t='filename'
     h='Image file output name' />
<mel n='of' p='1' t='string'
     h="File format of output images:\n
	                                 Alias, Cineon, It, MayaIFF,\n
                                  OpenEXR, SGI8, SGI16, SoftImage,\n
                                  Targa, Tiff8, Tiff16, Tiff32, DeepImage"
     s='rmanSetImageFormat "%1";'/>

<sep /> <!-- =========================================================== -->
<sep desc="Frame numbering options"/>

<mel n="s" p='1' t='float' 
     s='setAttr -l 0 defaultRenderGlobals.animation; 
        setAttr defaultRenderGlobals.animation 1; 
        rmanDisconnectDstAttrs defaultRenderGlobals.startFrame;
        setAttr -l 0 defaultRenderGlobals.startFrame; 
        setAttr defaultRenderGlobals.startFrame %1'
     h='Starting frame for an animation sequence' />
<mel n="e" p='1' t='float'
     s='setAttr -l 0 defaultRenderGlobals.animation; 
        setAttr defaultRenderGlobals.animation 1; 
        rmanDisconnectDstAttrs defaultRenderGlobals.endFrame;
        setAttr -l 0 defaultRenderGlobals.endFrame; 
        setAttr defaultRenderGlobals.endFrame %1'
     h='End frame for an animation sequence' />
<attr n="b" s='defaultRenderGlobals.byFrameStep' t='float' 
     h='By frame (or step) for an animation sequence' />
<mel n="pad" p='1' t='int'
     h='Number of digits in the output image frame file name'
     s='rmanDisconnectDstAttrs defaultRenderGlobals.extensionPadding;
        setAttr "defaultRenderGlobals.extensionPadding" %1;' />
<mel n="rfs" p='1' t='int'
     s='rmanSetGlobalAttr "renumber" 1;
        rmanSetGlobalAttr "renumberStart" %1;' />
<mel n="rfb" p='1' t='int'
     s='rmanSetGlobalAttr "renumber" 1;
        rmanSetGlobalAttr "renumberBy" %1;' />

<sep /> <!-- =========================================================== -->

<sep desc="Camera options"/>
<mel n='cam' s='makeCameraRenderable("%1")' p='1' t='name'
     h='Specify which camera to be rendered' />
<mel n='rgb' s='applyOnCameras("image", "%1")' p='1' t='boolean'
     h='Turn RGB output on or off' />
<mel n='alpha' s='applyOnCameras("mask", "%1")' p='1' t='boolean'
     h='Turn Alpha output on or off' />
<mel n='depth' s='applyOnCameras("depth", "%1")' p='1' t='boolean'
     h='Turn Depth output on or off' />
<mel n='iip' s='disableImagePlanes' p='0' t=''
     h='Ignore Image Planes turn off all image planes before rendering' />

<sep /> <!-- =========================================================== -->

<mel n='res' p='2' t='int int'
     s='rmanSetGlobalAttr "Format:resolution" "%1 %2"'
     h='Set X Y resolution of the final image' />
<mel n='crop' p='4' t='float float float float'
     s='rmanSetCropWindow %1 %2 %3 %4'
     h='Set the crop window of the final image' />
<mel n='gain' p='1' t='float'
     s='rmanSetGain "%1"'
     h='Set the gain of the final image' />
<mel n='gamma' p='1' t='float'
     s='rmanSetGamma "%1"'
     h='Set the gamma of the final image' />

<sep /> <!-- =========================================================== -->

<sep desc="Render Layers:"/>
<mel n="rl" s='$rl="%1"' p="1" t="boolean|name(s)" h="Render each render layer separately"/>

<sep /> <!-- =========================================================== -->

<sep desc="Mel callbacks"/>
<mel n='pre' p='1' t='string'
     s='rmanSetGlobalAttr "preFrameScript" "%1"'
     h='Mel code executed before each frame' />
<mel n='post' t='string'
     s='rmanSetGlobalAttr "postFrameScript" "%1"'
     h='Mel code executed after each frame' />

<sep /> <!-- =========================================================== -->

<sep desc="Mel callbacks for Maya 7.0"/>
<attrString n="preRender" s="defaultRenderGlobals.preMel" t="string" 
     h="Mel code executed before rendering"/>
<attrString n="postRender" s="defaultRenderGlobals.postMel" t="string" 
     h="Mel code executed after rendering"/>
<attrString n="preLayer" s="defaultRenderGlobals.preRenderLayerMel" t="string" 
     h="Mel code executed before each render layer"/>
<attrString n="postLayer" s="defaultRenderGlobals.postRenderLayerMel" t="string" 
     h="Mel code executed after each render layer"/>
<mel n='preFrame' p='1' t='string'
     s='rmanSetGlobalAttr "preFrameScript" "%1"'
     h='Mel code executed before each frame' />
<mel n='postFrame' p='1' t='string'
     s='rmanSetGlobalAttr "postFrameScript" "%1"'
     h='Mel code executed after each frame' />


<sep /> <!-- =========================================================== -->


<sep desc="Bake Options"/>
<mel n='bake' p='1' t='int'
     s='rmanAddAttr $globals "rman__toropt___bakeMode" "%1";
rmanGetDefaultBakePass;' 
     h="0: Don't bake, but do regular rendering\n
                               1: Bake texture maps\n
                               2: Bake texture maps and do regular rendering" />
<mel n='bakeChannels' p='1' t='string'
     s='rmanSetBakeChannels "%1"'
     h="Comma delimited list of one or more channels: \n
	                                 Ambient,Backscattering,DiffuseColor,\n
	                                 DiffuseDirect,DiffuseDirectShadow,\n
	                                 DiffuseEnvironment,DiffuseIndirect,\n
	                                 GlowColor,Incandescence,OcclusionDirect\n
	                                 OcclusionIndirect,Refraction,Rim,\n
	                                 SpecularColor,SpecularDirect,\n
	                                 SpecularDirectShadow,SpecularEnvironment,\n
	                                 SpecularIndirect,Subsurface,Translucence" />
<mel n='bakeResolution' p='2' t='int int'
     s='rmanSetBakeResolution %1 %2'
     h='Set X Y resolution of baked maps' />
<mel n='bakeCamera' p='1' t='string'
     s='rmanSetBakeCamera "%1"'
     h="Camera to use while baking" />
<mel n='bakeFileFormat' p='1' t='string'
     s='rmanSetBakeFileFormat "%1"'
     h="File format of output images:\n
	                                 Alias, Cineon, Iceman, MayaIFF,\n
                                  OpenEXR, SGI8, SGI16, SoftImage,\n
                                  Targa, Tiff8, Tiff16, Tiff32" />
<mel n='bakeFileDepth' p='1' t='string'
     s='rmanSetBakeFileDepth "%1"'
     h="Depth of output images: byte, short, float" />


<sep /> <!-- =========================================================== -->

<sep desc="Spool Options"/>
<mel n='spool' p='1' t='string'
     s='$spoolmode="%1"'
     h='"mayabatch local"\n
	                              "mayabatch remote"\n
	                              "immediate rib, local render"\n
	                              "deferred rib, remote render"\n
	                              "remote rib, remote render"' /> 

<mel n='chunkSize' p='1' t='int'
     s='$chunksize="%1"'
     h="Frames per server, for remote renders." />

<mel n='batchContext' p='1' t='string'
     s='string $o = "$JOBDATETIME"; 
        if(`optionVar -exists rmanBatchSceneCtx`) {$o = `optionVar -q rmanBatchSceneCtx`;}
        optionVar -stringValue rmanBatchSceneCtx "%1";
        addAttr -dt "string" -ln "spoolingBatchContext" $globals;
        rmanBeginBatchContext(1);
        optionVar -stringValue rmanBatchSceneCtx $o;'
     h='A postfix to append to the current scene name\n
                                   to prevent collisions of background\n
                                   rendering assets.\n
                                   Default value is $JOBDATETIME' />

<sep />

<sep desc=' *** Remember to place a space between option flags and their arguments. ***' />
<sep desc='Any boolean flag will take the following values as TRUE: on, yes, true, or 1.' />
<sep desc='Any boolean flag will take the following values as FALSE: off, no, false, or 0.' />
<sep />
<sep desc='    e.g. -s 1 -e 10 -x 512 -y 512 -cam persp file.' />

<sep /> <!-- =========================================================== -->

<sep desc="Other"/>

<mel n='rep' p='1' t= 'boolean'
     s='rmanSetGlobalAttr "lazyRender" "%1";'
     h="Do not replace the rendered image if it already exists" />
<mel n='n' p='1' t='int'
     s='rmanSetGlobalAttr "limits:threads" "%1";' 
     h='Number of processors to use.\n
                               0 indicates use all available.' />
<mel n='compile' p='1' t= 'boolean'
     s='if (%1 == 0) {rman setPref BatchCompileMode lazy;} else {rman
     setPref BatchCompileMode zealous;}' 
     h='Compile all shaders even if they already exist.' />

<mel n='jpf' p='1' t='int'
     s='addAttr -ln "jobphasefilter" $globals;setAttr ($globals+".jobphasefilter") %1;'
     h='Use the job phase filter to execute part of the job graph\n
                               0: all phases, as usual\n
                               1: preflight phase only\n
                               2: frames phase only\n
                               3: cleanup phase only\n'
     />

</renderer>

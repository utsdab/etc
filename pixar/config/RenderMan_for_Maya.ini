#
# -------------------------------------------------------------------------
# RenderMan_for_Maya.ini $Revision: #22 $
#   This file contains required initialization settings for RenderMan_for_Maya.
#   We suggest that you not edit this file, but rather place overrides and
#   extensions in a file of the same name located in your prefs directory.
#   Please refer to documentation pertaining to RMS_SCRIPT_PATHS.
#--------------------------------------------------------------------------
#

SetPref BatchCompileMode lazy; # lazy, zealous

SetPref DisableSwatchRender 0;
SetPref DisableRifShaderAttachment 0
SetPref DisableCacheInZip 0

# RfM automatically exports XGen patches for the appropriate frame range.
# To avoid potentially redundant exports, this can be disabled
# and managed via the XGen window File->Export Patches for Batch Render.
SetPref AutoExportXGenPatches 1

# The Job Phase Tree represents the dependencies between Job Phases.
# Individual rendering passes and other commands (texture conversion,
# file cleanup, etc.) can be stored within a known phase.  Phases
# can be repeated according to the Job Settings.

SetPref JobPhaseTree {
    /Job
    /Job/Preamble -referenceFrame _JobSettings
    /Job/Preflight -referenceFrame _JobSettings
    /Job/Preflight/Prerender
    /Job/Preflight/Maps
    /Job/Preflight/Maps/Reference
    /Job/Preflight/Images
    /Job/Preflight/Cleanup
    /Job/Frames -repeat _JobSettings
    /Job/Frames/Prerender
    /Job/Frames/Maps
    /Job/Frames/Maps/Reference
    /Job/Frames/Images
    /Job/Frames/Cleanup
    /Job/Cleanup
}
# These are the job phases that are required to exist.
SetPref JpJob /Job
SetPref JpPreamble /Job/Preamble
SetPref JpPreflightCleanup  /Job/Preflight/Cleanup
SetPref JpFramePrerender /Job/Frames/Prerender
SetPref JpFrameCleanup /Job/Frames/Cleanup
SetPref JpCleanup /Job/Cleanup

# The PassRefValidityTable maps each pass class to a list of
# classes in which such a reference would be valid.  For example, Shadow
# passes may be referenced by shaders in Final passes, but it wouldn't
# make sense for Shadow passes to be referenced by shaders in Shadow passes.
# When shader parameters containing pass references are output at render
# time this table is used to determine which pass references to expand.

SetPref PassRefValidityTable {
    TxMake {Final FinalDenoise RerenderRIS ReferenceRender}
    Reference {}
    ReferenceRender {Final FinalDenoise RerenderRIS }
    Denoise {Denoise}
    DenoiseCrossFrame {DenoiseCrossFrame}
    Final {Final}
    FinalDenoise {Denoise DenoiseCrossFrame}
    RerenderRIS  {RerenderRIS}
}

SetPref FinalRISPassClasses {Final FinalDenoise RerenderRIS Bake}

# The ImageFormatQuantizationTable allows image format and quantization
# to be controlled simultaneously so that unsupported combinations can be
# avoided.  Entries in this table appear as entries in the "Image Format"
# option menu in the Render Globals.  The first element in each triple is
# a label.  The second element is an image format, the third is a
# quantization which will be set when the entry is selected.  The entries
# of the quantization value are for zero, one, min, max, dither.

SetPref ImageFormatQuantizationTable {
    {Alias (alias)} alias {0 255 0 255 0.5}
    {Cineon (cin)} cineon {0 65535 0 65535 0}
    {MayaIFF (iff)} mayaiff {0 255 0 255 0.5}
    {OpenEXR (exr)} openexr {0 0 0 0 0}
    {SGI8 (sgi)} sgif {0 255 0 255 0.5}
    {SGI16 (sgi)} sgif {0 65535 0 65535 0}
    {SoftImage (pic)} softimage {0 255 0 255 0.5}
    {Targa (tga)} targa {0 255 0 255 0.5}
    {Tiff8 (tif)} tiff {0 255 0 255 0.5}
    {Tiff16 (tif)} tiff {0 65535 0 65535 0}
    {Tiff32 (tif)} tiff {0 0 0 0 0}
    {Texture8 (tex)} texture {0 255 0 255 0.5}
    {Texture16 (tex)} texture {0 65535 0 65535 0}
    {Texture32 (tex)} texture {0 0 0 0 0}
    {DeepImage (dtex)} deepshad {0 0 0 0 0}
    {DeepExr (exr)} deepexr {0 0 0 0 0}
    {It8 (it)} it {0 255 0 255 0.5}
    {It16 (it)} it {0 65535 0 65535 0}
    {It32 (it)} it {0 0 0 0 0}
}

SetPref Framebuffer internal; # alternatively: external

# Prefs which begin with RManPreset_## will appear as entries in the
# Render Settings window under the Presets->Load Preset menu.
# Each collection of presets can include any number of global settings
# which should be set accordingly when the preset is loaded.
SetPref RManPreset_01_Draft {
    settings:job:RISJob Hider:minsamples 0
    settings:job:RISJob Hider:maxsamples 16
    settings:job:RISJob Hider:minextrasamples 0
    settings:job:RISJob PixelVariance .1
    settings:job:RISJob Hider:darkfalloff .025
    settings:job:RISJob trace:maxspeculardepth 2
    settings:job:RISJob trace:maxdiffusedepth 1
}

SetPref RManPreset_02_Intermediate {
    settings:job:RISJob Hider:minsamples 0
    settings:job:RISJob Hider:minextrasamples 0
    settings:job:RISJob Hider:maxsamples 64
    settings:job:RISJob PixelVariance .05
    settings:job:RISJob Hider:darkfalloff .025
    settings:job:RISJob trace:maxspeculardepth 2
    settings:job:RISJob trace:maxdiffusedepth 2
}

SetPref RManPreset_03_Production {
    settings:job:RISJob Hider:minsamples 32
    settings:job:RISJob Hider:minextrasamples 16
    settings:job:RISJob Hider:maxsamples 512
    settings:job:RISJob PixelVariance .005
    settings:job:RISJob Hider:darkfalloff .025
    settings:job:RISJob trace:maxspeculardepth 4
    settings:job:RISJob trace:maxdiffusedepth 2
}

SetPref RManPreset_04_Production_High {
    settings:job:RISJob Hider:minsamples 64
    settings:job:RISJob Hider:minextrasamples 25
    settings:job:RISJob Hider:maxsamples 1024
    settings:job:RISJob PixelVariance .0025
    settings:job:RISJob Hider:darkfalloff .025
    settings:job:RISJob trace:maxspeculardepth 4
    settings:job:RISJob trace:maxdiffusedepth 2
}

SetPref RManPreset_05_Production_denoiser {
    settings:job:RISJob Hider:minsamples 49
    settings:job:RISJob Hider:minextrasamples 16
    settings:job:RISJob Hider:maxsamples 256
    settings:job:RISJob PixelVariance .01
    settings:job:RISJob Hider:darkfalloff .025
    settings:job:RISJob trace:maxspeculardepth 4
    settings:job:RISJob trace:maxdiffusedepth 2
}
#########################################################################
SetPref TractorDashboardURL {http://tractor-engine/tractor/dashboard/}
SetPref TractorEngine {tractor-engine:5600}
SetPref TractorUser {pixar}

SetPref DefaultEnvKey \
    "rfm-[GetVersion product]-maya-[GetPlatform rfm_mayaversion]"

SetPref LocalQueueLaunchPath [file join $RMANTREE bin LocalQueue]
SetPref ptrenderLaunchPath [file join $RMSTREE rmantree bin ptrender]

#########################################################################

switch $::tcl_platform(os) {
    "Darwin" {
        SetPref itLaunchPath [file join $RMANTREE bin it.app Contents MacOS it]
    }
    default {
        SetPref itLaunchPath [file join $RMANTREE bin it]
    }
}

# A list of default rifs.
# RfM relies on RLFInjector to be in this list.
# Rif args can be supplied using the -rifargs flag:
# eg. "-rif RLFInjector -rifargs -filtergeom 1 -rifend"
SetPref DefaultRifs {
    "-rif RLFInjector -rifend"
}

# The outputs listed below in the OutputClasses pref will appear in the menu
# for adding outputs under the Passes tab.  The names listed
# here correspond to declared display channels.  You may add your own type of
# output to this list.
SetPref RISStdAOVs {
    "color Ci"
    "color Oi"
    "float a"
    "normal Nn"
    "normal Ngn"
    "normal Non"
    "point P"
    "point Po"
    "float PRadius"
    "vector Tn"
    "vector Vn"
    "float VLen"
    "float cpuTime"
    "float curvature"
    "float du"
    "float dv"
    "float dw"
    "vector dPdu"
    "vector dPdv"
    "vector dPdw"
    "vector dPdtime"
    "float id"
    "float incidentRayRadius"
    "float incidentRaySpread"
    "vector motionFore"
    "vector motionBack"
    "float mpSize"
    "float outsideIOR"
    "float sampleCount"
    "float time"
    "float u"
    "float v"
    "float w"
    "float z"
}

# Each entry in RIS*AOVs prefs below can take the form of either "type name"
# or {"type name" {type source}}
SetPref RISAOVs {
    {"color albedo" {color lpe:nothruput;noinfinitecheck;noclamp;unoccluded;overwrite;C<.S'passthru'>*((U2L)|O)}}
    {"color beauty" {color lpe:C\[DS\]*\[<L.>O\]}}
    {"color emissive" {color lpe:C\[<L.>O\]}}
    {"color shadow" {color lpe:shadows;C\[DS\]\[<L.>O\]}}
    {"color directDiffuse" {color lpe:C<RD>\[<L.>O\]}}
    {"color directDiffuseUnoccluded" {color lpe:unoccluded;C<RD>\[<L.>O\]}}
    {"color directSpecular" {color lpe:C<RS>\[<L.>O\]}}
    {"color directSpecularUnoccluded" {color lpe:unoccluded;C<RS>\[<L.>O\]}}
    {"color indirectDiffuse" {color lpe:C<RD>\[DS\]+\[<L.>O\]}}
    {"color indirectDiffuseUnoccluded" {color lpe:unoccluded;C<RD>\[DS\]+\[<L.>O\]}}
    {"color indirectSpecular" {color lpe:C<RS>\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularUnoccluded" {color lpe:unoccluded;C<RS>\[DS\]+\[<L.>O\]}}
    {"color subsurface" {color lpe:C<TD>\[DS\]*\[<L.>O\]}}
    {"color transmissive" {color lpe:C<TS>\[DS\]*\[<L.>O\]}}
    {"color directDiffuseLobe" {color lpe:CD2\[<L.>O\]}}
    {"color directSpecularPrimaryLobe" {color lpe:CS2\[<L.>O\]}}
    {"color directSpecularRoughLobe" {color lpe:CS3\[<L.>O\]}}
    {"color directSpecularClearcoatLobe" {color lpe:CS4\[<L.>O\]}}
    {"color directSpecularIridescenceLobe" {color lpe:CS5\[<L.>O\]}}
    {"color directSpecularFuzzLobe" {color lpe:CS6\[<L.>O\]}}
    {"color directSpecularGlassLobe" {color lpe:C<RS8>\[<L.>O\]}}
    {"color indirectDiffuseLobe" {color lpe:CD2\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularPrimaryLobe" {color lpe:CS2\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularRoughLobe" {color lpe:CS3\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularClearcoatLobe" {color lpe:CS4\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularIridescenceLobe" {color lpe:CS5\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularFuzzLobe" {color lpe:CS6\[DS\]+\[<L.>O\]}}
    {"color indirectSpecularGlassLobe" {color lpe:C<RS8>\[DS\]+\[<L.>O\]}}
    {"color subsurfaceLobe" {color lpe:CD3\[DS\]*\[<L.>O\]}}
    {"color transmissiveSingleScatterLobe" {color lpe:CS7\[DS\]*\[<L.>O\]}}
    {"color transmissiveGlassLobe" {color lpe:C<TS8>\[DS\]*[<L.>O\]}}
}

SetPref RISShadowAOVs {
    {"color occluded" {color lpe:holdouts;C[DS]+<L.>}}
    {"color unoccluded" {color lpe:holdouts;unoccluded;C[DS]+<L.>}}
}

SetPref RISDenoiseAOVs {
    "color Ci"
    "float a"
    {"color mse" {color Ci}}
    {"color albedo" {color lpe:nothruput;noinfinitecheck;noclamp;unoccluded;overwrite;C<.S'passthru'>*((U2L)|O)}}
    {"color albedo_var" {color lpe:nothruput;noinfinitecheck;noclamp;unoccluded;overwrite;C<.S'passthru'>*((U2L)|O)}}
    {"color diffuse" {color lpe:C(D\[DS\]*\[LO\])|\[LO\]}}
    {"color diffuse_mse" {color lpe:C(D\[DS\]*\[LO\])|\[LO\]}}
    {"color specular" {color lpe:CS\[DS\]*\[LO\]}}
    {"color specular_mse" {color lpe:CS\[DS\]*\[LO\]}}
    {"float z" {float z}}
    {"float z_var" {float z}}
    {"normal normal" {normal Nn}}
    {"normal normal_var" {normal Nn}}
    {"vector forward" {vector motionFore}}
    {"vector backward" {vector motionBack}}
}

SetPref RISMatteAOVs {
    "color MatteID0"
    "color MatteID1"
    "color MatteID2"
    "color MatteID3"
    "color MatteID4"
    "color MatteID5"
    "color MatteID6"
    "color MatteID7"
}

SetPref RISIntegratorAOVs {
    "color __Pworld"
    "color __Nworld"
    "color __depth"
    "color __st"
    "color __Pref"
    "color __Nref"
    "color __WPref"
    "color __WNref"
}

foreach aov [concat [GetPref RISStdAOVs] \
                    [GetPref RISIntegratorAOVs] \
                    [GetPref RISAOVs] \
                    [GetPref RISMatteAOVs]] {
    foreach {type nm} $aov {
        if {[llength $type] > 1} {
            # some aovs include a source, so can't always use second item as nm
            lappend aovNamesRIS [lindex $type 1]
            lappend aovNamesRISTyped [concat [lindex $type 0] " " [lindex $type 1]]
        } else {
            lappend aovNamesRIS $nm
            lappend aovNamesRISTyped [concat $type " " $nm]
        }
    }
}
SetPref RISOutputClasses $aovNamesRIS
SetPref RISOutputClassesTyped $aovNamesRISTyped

# These are the AOV prefs which will appear in the RenderMan Controls

SetPref RISAOVTabs {
    "Standard" RISStdAOVs
    "LPE" RISAOVs
    "Integrators" RISIntegratorAOVs
    "Matte" RISMatteAOVs
}

SetPref CreateMenuPassClasses {
    "Final"
    "TxMake"
}

# Folks who never like polygons, can set rmanMeshRep to subdiv
# You can also override the interpretation of polygon meshes with
# a per-mesh attribute rmanSubdiv (or mtorSubdiv):  0: mesh, 1: subdiv
SetPref rmanMeshRep mesh

# Setting the FurStyle pref to legacy causes RfM to ignore
# equalizer maps and calc area values.
#SetPref FurStyle legacy

# Load critical RfM interface definition files.
set rfmLibDir [file join [RATGetDir lib] rfm]
set cfg $rfmLibDir

# Load RfM-specific extensions to RMSExpression
LoadExtension tcl [file join $cfg RfMExpression.tcl]
LoadExtension tcl [file join $cfg RfMPassExpression.tcl]
LoadExtension tcl [file join $cfg RfMWorkExpression.tcl]

# first define known options, attributes and shader parameters
LoadExtension rman [file join $cfg decl_torcontrols.rman]
LoadExtension rman [file join $cfg decl_rioptions.rman]
LoadExtension rman [file join $cfg decl_riattributes.rman]
LoadExtension rman [file join $cfg decl_cmdparams.rman]
LoadExtension rman [file join $cfg decl_shaderparameters.rman]

# node definitions, nodes_base.rman defines some common collections
# that are referenced by other nodes_ files and so should precede others.
LoadExtension rman [file join $cfg nodes_base.rman]
LoadExtension rman [file join $cfg nodes_rif.rman]

# optional parameters for maya nodes
LoadExtension rman [file join $cfg nodeoptions.rman]

# now define renderman globals interface
LoadExtension rman [file join $cfg gui.rman]

# now define renderman globals interface
LoadExtension rman "UTS_overrides.rman"

# now load known shader node emulators:
#   all files whose names don't begin with _ represent shading nodes.
set mayaNodesDir [file join $rfmLibDir rsl mayaNodes]
foreach f [glob -nocomplain -- [file join $mayaNodesDir *.h]] {
    if {![string match _* [file tail $f]]} {
        LoadExtension rslt $f
    }
}

set customNodesDir [file join $rfmLibDir rsl customNodes]
foreach f [glob -nocomplain -- [file join $customNodesDir *.{sl,h}]] {
    if ![string match _* [file tail $f]] {
        LoadExtension rslt $f
    }
}

# RfM output dirs are controlled via RMS.ini

# By default: we use the shader compiler that ships with RfM.  You
# can override this command to point to an alternate version. Be aware
# that the internal version of prman may not be compatible with the
# output of an alternate compiler version.
# The form is that of a proper tcl list of arguments.  We employ tcl's
# list command because RMSTREE can include spaces.
# The standard include paths point to the internal locations of shadeop
# plugins and factory templates. You can override factory templates by
# ensuring that your custom template directory precedes the factory
# directory in the searchpaths.  At compile time we substitute
# the %f token with the generated shader filename.
SetPref ShaderCompiler [list $RMANTREE/bin/shader \
                            -I$RMSTREE/lib/shaders \
                            -I$RMSTREE/lib/slim/pxCoreV1 \
                            -I$RMSTREE/lib/rfm/rsl -C %f]
SetPref ShaderCompilerCleanup 1

# The ImplicitTxMake pref codifies how to auto-convert maya image source
# files to renderman textures.  Currently we support 3 classes of TxMakes
# according to their use-cases in maya shading networks. Explicit
# txmake passes follow a different code-path and provide explicit
# control over txmake parameters.
SetPref ImplicitTxMakeFmts {

environmentLatLong {
  MakeLatLongEnvironment "%s" "%s" "gaussian" 2 2 "newer" [1]}

imageplane {
  MakeTexture "%s" "%s" "black" "black" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up"]}

texture {
  MakeTexture "%s" "%s" "periodic" "periodic" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up-"]}

_default {
  MakeTexture "%s" "%s" "periodic" "periodic" "separable-catmull-rom" 2 2 \
"newer" [1] "resize" ["up-"]}

}

# A list of file extensions for which texture conversion should be skipped.
# These are useful for users who have preconverted textures and don't want
# them reconverted according to the rules above.
SetPref NoConvertTextureExtensions {tx tex env ptx}

if {[GetPlatform platform] eq "windows"} {
    # By default we make slim behave like a child window of Maya. Set to 0 to
    # return to the rms1 behavior.
    SetPref ParentSlimsWindow 1
}

# Use RPSVersion to specify which version of RPS is being used, if you wish to
# enable features in the UI that aren't supported by the built-in renderer.
#SetPref RPSVersion 16.2

SetPref RIBGenSvc	RfMRibGen
SetPref LocalRenderCmd	{prman -t:0 -Progress -recover %r -checkpoint 0}
SetPref LocalRenderSvc	local:PixarRender
SetPref LocalRfMRenderSvc local:RfMRender
SetPref RemoteRenderCmd	{prman -t:0 -Progress -recover %r -checkpoint 0}
SetPref RemoteRenderSvc	PixarRender
SetPref RemoteRfMRenderSvc RfMRender
SetPref ShoCmd		sho

# The prefs below which begin with Launch* are used for rerendering;
# prman is launched in piped mode.  ie. commands are piped directly
# to the prman or rerender process.

set rmantree [GetEnv RMANTREE]
if {$rmantree != {}} {
    if {[file exists $rmantree/bin/prman.exe] == 0 && [file exists $rmantree/bin/prman] == 0} {
        RAT::LogMsg WARNING "Invalid RMANTREE: $rmantree"
        set rmantree $RMSTREE/rmantree
    }
} else {
    RAT::LogMsg WARNING "No RMANTREE set. RenderMan for Maya requires RenderMan to be installed"
    set rmantree $RMSTREE/rmantree
}

set prman $rmantree/bin/prman
set it [GetPref itLaunchPath]
set ituri [regsub -all " " $it %20]; # replace spaces in path-to-it

SetPref LaunchRaytraceRerenderCmd "launch:${prman}?"
SetPref LaunchStdArgs "-t:0 -Progress -ctrl \$ctrlin \$ctrlout -xcpt \$xcptin"
SetPref LaunchToItArg  "-dspyserver ${ituri}";# pixels to 'it'
SetPref LaunchToRenderViewArg "-dspy \$dspyin \$dspyout";# pixels back over pipe

# mayaBatchLaunchPath:
#   This is used when maya is launched in batch mode by alfred or tractor.
#   The maya install dir needs to be in your system path or else you
#   need to specify a full path here.
SetPref mayabatchLaunchPath {%D(mayabatch) -batch}

# A menu of these spool styles appears in the Maya batch render dialog window.
# These pairs consist of a label and a mel script. The mel script must return
# the name of the alfred job script that it generates.  It also needs to do
# any necessary preliminary work, like immediate RIB generation.
SetPref SpoolScripts {
    "immediate rib" rmanSpoolImmediate
    "deferred rib" rmanSpoolDeferred
    "remote rib" rmanSpoolRemote
}

# A menu of these spool styles appears in the render current frame dialog.
SetPref PreviewSpoolScripts {
    "local render" rmanSpoolLocalPreviewRender
    "remote render" rmanSpoolRemotePreviewRender
}


set cfgdir [file join [RATGetDir lib] rfm]

# RSL Template Nodes:
#  Pixar has reserved maya node ids: 0x0101261-0x01012ff for our rfm templates
#  Sites should request node id blocks from Alias/Autodesk to prevent
#  compatibility issues.  Sites should further adopt naming conventions
#  in the form of four-letter prefixes to reduce the risk of template
#  collision. The prefixes rman and px are reserved by Pixar.
set templdir [file join $cfgdir rsl customNodes]
LoadExtension rslTmplt [file join $templdir rfmManifold.rslt]
LoadExtension rslTmplt [file join $templdir rfmTexture2d.rslt]
LoadExtension rslTmplt [file join $templdir rfmTexture3d.rslt]
LoadExtension rslTmplt [file join $templdir rfmUtility.rslt]

SetPref HelpURLs [list \
 "RenderMan Docs"  \
   "https://rmanwiki.pixar.com" \
 "RenderMan for Maya Forums"  \
   "https://renderman.pixar.com/forum/forumdisplay.php?s=&forumid=111" \
 "RenderMan Forums"  \
   "https://renderman.pixar.com/forum/forumdisplay.php?s=&forumid=23" \
	]

SetPref UpgradeURL "http://renderman.pixar.com/view/NCR-Upgrade"

# ItNodesScript:
# This mel script is responsible for generating the notes that get sent to
# It. The default script computes a date and time stamp.
SetPref ItNotesScript { rmanItNotesScript }

# DspyParamsScripts:
# A mel script can be specified for each kind of display driver.
# Each script generates a string which will be passed to the display
# driver as a param called dspyParams.  "it" recognizes dspyParams.
SetPref DspyParamsScripts {
    "it" {rmanDspyParamsScript "it" "$PASSID" "$PASSCLASS"}
}

SetPref SlimTetherMode tight
# SlimTetherMode controls the style of communication between RfM and Slim.
# Options:
#     "tight": slim session data is stored in the maya scene file. This mode
#         was introduced in RMS 3.0 and loosely follows the MTOR-Slim
#         style of tethering.
#     "loose": slim session data stored in external slim session files
#         following the AssetStageStrategy preference.
#   The value in this file represents a site-wide tethering policy.

# RfM has its own version of SlimClientExpression.tcl which implements
# the interface defined by slim's file with the same name.
LoadExtension tcl [file join $cfg SlimClientExpression.tcl]

# Specify the first maya node ID from a block (ideally assigned to your site),
# and all RIS nodes will incrementally be assigned an ID from this block,
# ignoring those specified in the args files.
# This avoids having to individually assign unique IDs in args files,
# but it could cause incompatibility when sharing binary scene files;
# IDs are only saved in scene files in maya binary format.
#SetPref RISFirstID 0

# The RISNodeTable maps maya node names to implementations as RIS plug-ins.
SetPref RISNodeTable {
    "bifrostAeroMaterial" PxrBifrostAero
    "xgen_hair_physical" PxrMayaXgenHairPhysical
    "blendColors" PxrMayaBlendColors
    "bulge" PxrMayaBulge
    "bump2d" PxrMayaBump2d
    "bump3d" PxrMayaBump3d
    "brownian" PxrMayaBrownian
    "checker" PxrMayaChecker
    "clamp" PxrMayaClamp
    "cloth" PxrMayaCloth
    "cloud" PxrMayaCloud
    "condition" PxrCondition
    "contrast" PxrMayaContrast
    "crater" PxrMayaCrater
    "file" PxrMayaFile
    "fluidShape" PxrMayaFluidShape
    "fractal" PxrMayaFractal
    "gammaCorrect" PxrMayaGammaCorrect
    "granite" PxrMayaGranite
    "grid" PxrMayaGrid
    "hairSystem" PxrMayaHair
    "hsvToRgb" PxrMayaHsvToRgb
    "imagePlane" PxrMayaImagePlane
    "layeredTexture" PxrMayaLayeredTexture
    "leather" PxrMayaLeather
    "luminance" PxrMayaLuminance
    "marble" PxrMayaMarble
    "mountain" PxrMayaMountain
    "multiplyDivide" PxrMultiplyDivide
    "noise" PxrMayaNoise
    "place2dTexture" PxrMayaPlacement2d
    "place3dTexture" PxrMayaPlacement3d
    "plusMinusAverage" PxrMayaPlusMinusAverage
    "projection" PxrMayaProjection
    "ramp" PxrMayaRamp
    "remapColor" PxrMayaRemapColor
    "remapHsv" PxrMayaRemapHsv
    "remapValue" PxrMayaRemapValue
    "reverse" PxrMayaReverse
    "rgbToHsv" PxrMayaRgbToHsv
    "rock" PxrMayaRock
    "setRange" PxrMayaSetRange
    "snow" PxrMayaSnow
    "solidFractal" PxrMayaSolidFractal
    "stucco" PxrMayaStucco
    "uvChooser" PxrMayaUVChooser
    "volumeFog" PxrMayaVolumeFog
    "volumeNoise" PxrMayaVolumeNoise
    "wood" PxrMayaWood
}

# Parameter lists and UI hints for RIS bxdf and patterns are defined in
# xml based "args" files.  These are loaded from the list of directories below.
# Your own directories containing custom args files can be added to this list.
# If you add args files for your own plug-ins to the list, make sure to also
# visit RMSWorkspace.ini to make corresponding changes to the rix searchpath,
# the path where bxdf and pattern plug-ins are found by prman.
set RISArgsSearchPath [list \
                           [file join $rmantree lib plugins Args] \
                           [file join $cfg ris customNodes] \
                           [file join $cfg ris mayaNodes] \
                          ]

set RISOSLSearchPath [list \
                          [file join $rmantree lib shaders]
                      ]

# These are left out of RfM to avoid confusion; prefer PxrGP* equivalents
set hideList {PxrBxdfBlend PxrDiffuse PxrGlass PxrHair PxrSkin}
set excludeList {PxrOSL PxrUPBP}
SetPref RISArgsExcludeList $hideList

foreach argspath $RISArgsSearchPath {
    set argsfiles [glob -nocomplain "${argspath}/*.args"]
    foreach argsfile $argsfiles {
        # Args files can be excluded here, but in order to not
        # break existing scenes that use these nodes,
        # they will be filtered out from the create list in hypershade.
        set skip 0
        foreach exclude $excludeList {
            if [string match "*/${exclude}.*" $argsfile] {
                set skip 1
                break
            }
        }
        if !${skip} {
            LoadExtension args "$argsfile"
        }
    }
}

foreach oslpath $RISOSLSearchPath {
    set osofiles [glob -nocomplain "${oslpath}/*.oso"]
    foreach osofile $osofiles {
        LoadExtension osl "$osofile"
    }
}

RAT::LogMsg DEBUG "RenderMan_for_Maya.ini loaded!"


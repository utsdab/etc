<!--
# Copyright (c) 1986-2016 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608

$ Revision: $
-->

<?xml-stylesheet type="text/xsl" href="#stylesheet"?>
<!DOCTYPE doc [ 
<!ATTLIST xsl:stylesheet
  id    ID    #REQUIRED> 
]>
<doc>
<xsl:stylesheet version="1.0"
                id="stylesheet"
                xmlns:rm="http://renderman.pixar.com"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" media-type="text/html" version="4.0" encoding="iso-8859-1" indent="yes"/>
<xsl:template match="xsl:stylesheet" />

<!-- The root of the XML tree is a statsDoc, which can contain any number
     of children. -->
<xsl:template match="rm:statsDoc">
<html style="height: 100%; width: 100%;">
<head>
  <title>Rendering stats</title>
  <!-- Include inline style sheet and javascript. -->
  <xsl:call-template name="InlineStyle"/>
  <xsl:call-template name="InlineScript"/>
</head>
<!-- Apply other templates to generate the body. -->
<body>
  <xsl:call-template name="Frames"/>
</body>
</html>
</xsl:template>

<xsl:template name="InlineStyle">
  <style type="text/css">
    <xsl:text>
      body { 
        background-color: #c6dbff;
        font-family: Trebuchet, Arial, sans-serif; 
	height: 95%;
	overflow: auto;
      }
      
      table { border-collapse: collapse; }
      
      tr.odd { background-color: #e8eef7; }
      tr.even { background-color: white; }
      tr.headers { background-color: #cbdcf7 }
      td {
        padding-left: .5em;
        padding-right: .5em;
        vertical-align: top; 
      }
      th {
        padding-left: .5em;
        padding-right: .5em;
      }
      
      <!-- A row of radio buttons that select panels. -->
      .panelButtons {
	width: 75%;
        white-space: wrap;
	line-height: 4ex;
	margin-bottom: 1ex;
      }

      .panelButtonUp {
	cursor: default;
        background-color: #e8eef7;
        padding: 1px 4px 1px 4px;
        border-bottom: 2px solid gray;
        border-right: 2px solid gray;
        border-top: 1px solid white;
        border-left: 1px solid white;
        border-radius: 7px;
        -moz-border-radius: 7px;
      }

      .panelButtonDown {
	cursor: default;
        background-color: #c7ccd4;
        padding: 1px 4px 1px 4px;
        border-bottom: 2px solid white;
        border-right: 2px solid white;
        border-top: 1px solid gray;
        border-left: 1px solid gray;
        border-radius: 7px;
        -moz-border-radius: 7px;
      }

      <!-- A panel, which is displayed when the corresponding radio button is
	selected. -->
      .panel {
        background-color: white;
        display: none;		<!-- Panels are initially invisible. -->
        padding: 8px;
	height: 85%;
	overflow: auto;
      }
      
      <!-- Each frame of stats is displayed on a separate page. -->
      .page {
        display: none;		<!-- Pages are initially invisible. -->
	margin-top: 2px;
	height: 95%;
      }
    </xsl:text>
  </style>
</xsl:template>


<xsl:template name="InlineScript">
  <script type="text/javascript">
    <xsl:text>
      function panelSelected(button) {
	  enclosingDiv = button.parentNode.parentNode;
	  previousPanel = enclosingDiv.previousPanel;
	  previousButton = enclosingDiv.previousButton
	  if (!previousPanel)
	      previousPanel = 
	          enclosingDiv.getElementsByTagName('div')[1];
	  if (!previousButton)
	      previousButton = enclosingDiv.getElementsByTagName('span')[0];
	  previousPanel.style.display = 'none';
	  previousButton.className = 'panelButtonUp';

	  button.className = 'panelButtonDown';
	  panel = document.getElementById('panel.' + button.id);
	  panel.style.display = 'block';
	  enclosingDiv.previousPanel = panel;
	  enclosingDiv.previousButton = button;
	  return false;
      }
      function selectChanged(select) {
          if (select.previous)
	      document.getElementById(select.previous).style.display = 'none';
	  else {
	      options = select.getElementsByTagName('option');
	      first = options[0].getAttribute('value');
	      document.getElementById(first).style.display = 'none';
          }
	  document.getElementById(select.value).style.display = 'block';
	  select.previous = select.value;
      }
    </xsl:text>
  </script>
</xsl:template>

<xsl:template name="Frames">
    <!-- Drop-down menu of per-frame stats -->
    <p>
      <select onChange="selectChanged(this)">
	<xsl:for-each select="stats[@kind='frame']">
	  <xsl:element name="option">
	    <xsl:attribute name="value">
	      <xsl:value-of select="generate-id()"/>
	    </xsl:attribute>
	    Frame <xsl:value-of select="position()"/>:
	    <xsl:value-of 
	      select=".//stats[@name='display']/string[@name='name']"/>
	  </xsl:element>
	</xsl:for-each>
      </select>
    </p>

    <!-- Pages -->
    <xsl:for-each select="stats[@kind='frame']">
      <!-- Each pages is <div class="page" id="..."> -->
      <xsl:element name="div">
        <xsl:attribute name="class">page</xsl:attribute>
        <!-- Be careful to avoid whitespace in the following id. -->
	<xsl:attribute name="id"><xsl:value-of select="generate-id()"/></xsl:attribute>

	<!-- Pages are initially invisible, except for the first one. -->
	<xsl:if test="position()=1">
	  <xsl:attribute name="style">display:block</xsl:attribute>
	</xsl:if>

	<!-- Each page contains a collection of panels, one per section. -->
	<xsl:call-template name="PerFrameStats"/>
      </xsl:element>
    </xsl:for-each>
</xsl:template>

<xsl:template name="PerFrameStats">
  <xsl:variable name="frameId" select="generate-id()"/>
    <!-- Panel buttons -->
    <div class="panelButtons">
      <xsl:for-each select="*">
	  <xsl:element name="span">
	    <xsl:attribute name="id">
	      <xsl:value-of select="generate-id()"/>
	    </xsl:attribute>
	    <xsl:attribute name="onclick">panelSelected(this)</xsl:attribute>
	    <xsl:attribute name="onmousedown">return false</xsl:attribute>
	    <xsl:attribute name="class">
	      <xsl:choose>
		<xsl:when test="position()=1">panelButtonDown</xsl:when>
		<xsl:otherwise>panelButtonUp</xsl:otherwise>
	      </xsl:choose>
	    </xsl:attribute>
	    <xsl:value-of select="@name"/>
	  </xsl:element>
	  <xsl:text> </xsl:text>
      </xsl:for-each>
    </div>

    <!-- Panels -->
    <xsl:for-each select="*">
      <xsl:element name="div">
        <xsl:attribute name="class">panel</xsl:attribute>
        <!-- Be careful to avoid whitespace in the following id. -->
	<xsl:attribute name="id">panel.<xsl:value-of select="generate-id()"/></xsl:attribute>

	<!-- Panels are initially invisible, except for the first one. -->
	<xsl:if test="position()=1">
	  <xsl:attribute name="style">display:block</xsl:attribute>
	</xsl:if>

	<!-- Each panel contains a table of stats. -->
	<b><xsl:value-of select="@description"/></b><p/>
	<xsl:call-template name="MakeTable"/>
      </xsl:element>
    </xsl:for-each>
</xsl:template>

<!-- A timer stat contains elapsed, user, and system times. -->
<xsl:template match="timer">
    <xsl:param name="depth" select="0"/>
    <td>
      <xsl:call-template name="Description">
	<xsl:with-param name="depth" select="$depth"/>
      </xsl:call-template>
    </td>
    <td align="right">
      <xsl:call-template name="FormatTime">
	<xsl:with-param name="secs">
	  <xsl:value-of select="elapsed"/>
	</xsl:with-param>
      </xsl:call-template>
    </td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="elapsed/@delta"/>
    </xsl:call-template>
    <xsl:if test="user">
      <td align="right">
	<xsl:call-template name="FormatTime">
	  <xsl:with-param name="secs">
	    <xsl:value-of select="user"/>
	  </xsl:with-param>
	</xsl:call-template>
      </td>
      <xsl:call-template name="Delta">
	<xsl:with-param name="delta" select="user/@delta"/>
      </xsl:call-template>
    </xsl:if>
    <xsl:if test="system">
      <td align="right">
	<xsl:call-template name="FormatTime">
	  <xsl:with-param name="secs">
	    <xsl:value-of select="system"/>
	  </xsl:with-param>
	</xsl:call-template>
      </td>
      <xsl:call-template name="Delta">
	<xsl:with-param name="delta" select="system/@delta"/>
      </xsl:call-template>
    </xsl:if>
    <td colspan="0"/>
</xsl:template>

<xsl:template name="FormatTime">
    <xsl:param name="secs"/>
    <xsl:variable name="hours" select="floor($secs div 3600)"/>
    <xsl:variable name="minutes" select="floor(($secs mod 3600) div 60)"/>
    <xsl:variable name="seconds" select="$secs mod 60"/>
    <xsl:choose>
      <xsl:when test="$hours > 0">
	<xsl:value-of select="$hours"/>
	<xsl:text>:</xsl:text>      
	<xsl:value-of select="format-number($minutes, '00')"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="format-number($minutes, '0')"/>
      </xsl:otherwise>
    </xsl:choose>      
    <xsl:text>:</xsl:text>
    <xsl:value-of select="format-number($seconds, '00.0')"/>
</xsl:template>

<!-- A range stat contains current, total, max, average, and count. -->
<xsl:template match="range">
    <td><xsl:call-template name="Description"/></td>
    <td align="right"><xsl:value-of select="format-number(current, '###,###,##0')"/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="format-number(current/@delta, '###,###,##0')"/>
    </xsl:call-template>
    <td align="right"><xsl:value-of select="format-number(total, '###,###,##0')"/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="format-number(total/@delta, '###,###,##0')"/>
    </xsl:call-template>
    <td align="right"><xsl:value-of select="format-number(max, '###,###,##0')"/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="format-number(max/@delta, '###,###,##0')"/>
    </xsl:call-template>
    <td align="right">
      <xsl:value-of select="format-number(average, '###,##0.00')"/>
    </td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="format-number(average/@delta, '###,###,##0.00')"/>
    </xsl:call-template>
    <td align="right"><xsl:value-of select="format-number(count, '###,###,##0')"/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="format-number(count/@delta, '###,###,##0.00')"/>
    </xsl:call-template>
    <td colspan="0"/>
</xsl:template>

<!-- A memory stat contain peak and current. -->
<xsl:template match="memory">
    <xsl:param name="depth" select="0"/>
    <td>
      <xsl:call-template name="Description">
	<xsl:with-param name="depth" select="$depth"/>
      </xsl:call-template>
    </td>
    <td align="right">
      <xsl:value-of select="format-number(peak div (1024*1024), '###,##0.00')"/>
    </td>
    <td/>
    <td align="right">
      <xsl:value-of select="format-number(current div (1024*1024), '###,##0.00')"/>
    </td>
    <td/>
    <xsl:if test="total">
      <td align="right">
	<xsl:value-of select="format-number(total div (1024*1024), '###,##0.00')"/>
      </td>
      <td/>
    </xsl:if>
    <xsl:if test="count">
      <td align="right">
        <xsl:value-of select="format-number(count, '###,##0.00')"/>
      </td>
      <td/>
    </xsl:if>
    <td colspan="0"/>
</xsl:template>

<!-- A set of arbitrary items.  We simply separate the members with <br>. -->
<xsl:template match="set">
  <td><xsl:call-template name="Description"/></td>
  <td colspan="0">
    <xsl:for-each select="*">
      <xsl:value-of select="."/>
      <br/>
    </xsl:for-each>
  </td>
</xsl:template>

<!-- A histogram is a table with two rows. -->
<xsl:template match="histogram">
  <td><xsl:call-template name="Description"/></td>
  <td colspan="0">
    <table border="1">
    <!-- The row headers specify the upper bound of each bucket. -->
    <tr class="headers">
      <xsl:for-each select="*">
        <td align="center" width="25"><xsl:value-of select="@label"/></td>
      </xsl:for-each>
    </tr>
    <!-- The second row specifies the number of values in each bucket. -->
    <tr>
      <xsl:for-each select="*">
        <td align="right"><xsl:value-of select="format-number(., '###,##0')"/></td>
      </xsl:for-each>
    </tr>
    <!-- The third row contains the delta values (if present). -->
    <xsl:if test="*/@delta">
	  <tr>
	    <xsl:for-each select="*">
	      <xsl:call-template name="Delta">
		<xsl:with-param name="delta" select="@delta"/>
	      </xsl:call-template>
	    </xsl:for-each>
	  </tr>
    </xsl:if>
    </table>
  </td>
</xsl:template>

<!-- A list of timers is displayed specially. -->
<xsl:template match="stats[@kind='timers']">
    <tr>
      <td></td>
      <td align="right">Elapsed</td>
      <td/>
      <td align="right">User</td>
      <td/>
      <td align="right">System</td>
      <td/>
      <td colspan="0"/>
    </tr>
    <xsl:call-template name="NestedRows"/>
</xsl:template>

<!-- A list of memstats is displayed specially. -->
<xsl:template match="stats[@kind='memstats']">
    <tr>
      <td></td>
      <td align="right">Peak MB</td>
      <td/>
      <td align="right">Current MB</td>
      <td/>
      <xsl:if test="*/total">
	<td align="right">Total MB</td>
	<td/>
      </xsl:if>
      <xsl:if test="*/count">
	<td align="right">Count</td>
	<td/>
      </xsl:if>
      <td colspan="0"/>
    </tr>
    <xsl:call-template name="NestedRows"/>
</xsl:template>

<xsl:template name="NestedRows">
    <xsl:param name="depth" select="0"/>
    <xsl:for-each select="*">
      <xsl:choose>
	<xsl:when test="self::stats">
	  <xsl:call-template name="NestedRows">
	    <xsl:with-param name="depth" select="$depth+1"/>
	  </xsl:call-template>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:call-template name="NestedRow">
	    <xsl:with-param name="depth" select="$depth"/>
	  </xsl:call-template>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
</xsl:template>


<xsl:template name="NestedRow">
    <xsl:param name="depth" select="0"/>
    <tr>
      <xsl:apply-templates select=".">
	<xsl:with-param name="depth" select="$depth"/>
      </xsl:apply-templates>
    </tr>
</xsl:template>

<!-- Per-bxdf stats -->
<xsl:template match="stats[@name='RixPluginCache']">
    <p><b><xsl:value-of select="@description"/></b></p>

    <!-- Bxdf plugins -->
    <table>
      <tr class="headers">
        <td align="left" width="25">Bxdf</td>
        <td align="right" width="15">NumBegins</td>
        <td align="right" width="15">BeginTime</td>
      </tr>
      <xsl:for-each select="*[@kind='bxdf']">
        <xsl:sort select="NumBegins" data-type="number" order="descending"/>
        <xsl:element name="tr">
          <xsl:attribute name="class">
            <!-- The row class alternates between "odd" and "even". -->
            <xsl:choose>
              <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
              <xsl:otherwise>even</xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
        
            <td> <xsl:value-of select="@name"/> </td>
            <td align="right">
                <xsl:call-template name="FormatInt">
                  <xsl:with-param name="value">
                    <xsl:value-of select="*[@name='NumBegins']"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
            <td align="right"> 
                <xsl:call-template name="FormatTime">
                  <xsl:with-param name="secs">
                    <xsl:value-of select="*[@name='BeginTime']/elapsed"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
        </xsl:element>
      </xsl:for-each>
    </table>

    <p><b></b></p>

    <!-- Pattern plugins -->
    <table>
      <tr class="headers">
        <td align="left" width="25">Pattern</td>
        <td align="right" width="15">NumComputes</td>
        <td align="right" width="15">ComputeTime</td>        
      </tr>
      <xsl:for-each select="*[@kind='pattern']">
        <xsl:sort select="NumComputes" data-type="number" order="descending"/>
        <xsl:element name="tr">
          <xsl:attribute name="class">
            <!-- The row class alternates between "odd" and "even". -->
            <xsl:choose>
              <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
              <xsl:otherwise>even</xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
        
            <td> <xsl:value-of select="@name"/> </td>
            <td align="right">
                <xsl:call-template name="FormatInt">
                  <xsl:with-param name="value">
                    <xsl:value-of select="*[@name='NumComputes']"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>           
            <td align="right"> 
                <xsl:call-template name="FormatTime">
                  <xsl:with-param name="secs">
                    <xsl:value-of select="*[@name='ComputeTime']/elapsed"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>        
        </xsl:element>
      </xsl:for-each>
    </table>        

</xsl:template>      

<!-- Per-texture stats -->
<xsl:template match="stats[@name='textureFiles']">
    <p><b><xsl:value-of select="@description"/></b></p>    
    <table>
      <tr class="headers">
        <td align="left">Filename</td>
        <td align="right">Lookups</td>
        <td align="right">Reads</td>
        <td align="right">Bytes read</td>
        <td align="right">Read time</td>
        <td align="right">Decomp time</td>
      </tr>
      <xsl:for-each select="*">
        <xsl:sort select="readTime/elapsed" data-type="number" order="descending"/>
        <xsl:element name="tr">
          <xsl:attribute name="class">
            <!-- The row class alternates between "odd" and "even". -->
            <xsl:choose>
              <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
              <xsl:otherwise>even</xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
        
            <td> <xsl:value-of select="*[@name='fileName']"/> </td>
            <td align="right">
                <xsl:call-template name="FormatInt">
                  <xsl:with-param name="value">
                    <xsl:value-of select="*[@name='lookups']"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
            <td align="right">
                <xsl:call-template name="FormatInt">
                  <xsl:with-param name="value">
                    <xsl:value-of select="*[@name='reads']"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
            <td align="right">
                <xsl:call-template name="FormatInt">
                  <xsl:with-param name="value">
                    <xsl:value-of select="*[@name='bytesRead']"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
            <td align="right"> 
                <xsl:call-template name="FormatTime">
                  <xsl:with-param name="secs">
                    <xsl:value-of select="*[@name='readTime']/elapsed"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>
            <td align="right"> 
                <xsl:call-template name="FormatTime">
                  <xsl:with-param name="secs">
                    <xsl:value-of select="*[@name='decompressTime']/elapsed"/>
                  </xsl:with-param>
                </xsl:call-template>
            </td>

        </xsl:element>
      </xsl:for-each>
    </table>        
</xsl:template>

<!-- Per-shader stats -->
<xsl:template match="stats[@kind='shaders']">
    <p><b><xsl:value-of select="@description"/></b></p>
    <table width="75%">
      <xsl:for-each select="*">
	<xsl:sort select="timer/elapsed" data-type="number" order="descending"/>
	<xsl:element name="tr">
	  <xsl:attribute name="class">
	    <!-- The row class alternates between "odd" and "even". -->
	    <xsl:choose>
	      <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
	      <xsl:otherwise>even</xsl:otherwise>
	    </xsl:choose>
	  </xsl:attribute>
	  <td>
	    <xsl:call-template name="Description"/>
	  </td>
	  <td>
	    <table>
	      <xsl:for-each select="*">
		<tr>
		  <xsl:choose>
		    <xsl:when test="self::timer">
		      <td>
			<xsl:call-template name="Description"/>
		      </td>
		      <td align="right">
			<xsl:call-template name="FormatTime">
			  <xsl:with-param name="secs">
			    <xsl:value-of select="elapsed"/>
			  </xsl:with-param>
			</xsl:call-template>
		      </td>
		      <xsl:call-template name="Delta">
			<xsl:with-param name="delta" select="@delta"/>
		      </xsl:call-template>
		    </xsl:when>
		    <xsl:otherwise>
		      <xsl:apply-templates select="."/>
		    </xsl:otherwise>
		  </xsl:choose>
		</tr>
	      </xsl:for-each>
	    </table>
	  </td>
	</xsl:element>
      </xsl:for-each>
    </table>
</xsl:template>

<!-- Per-geometryprocedural stats -->
<xsl:template match="stats[@kind='geometryprocedurals']">
    <p><b><xsl:value-of select="@description"/></b></p>
    <table width="75%">
      <xsl:for-each select="*">
	<xsl:sort select="timer/elapsed" data-type="number" order="descending"/>
	<xsl:element name="tr">
	  <xsl:attribute name="class">
	    <!-- The row class alternates between "odd" and "even". -->
	    <xsl:choose>
	      <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
	      <xsl:otherwise>even</xsl:otherwise>
	    </xsl:choose>
	  </xsl:attribute>
	  <td>
	    <xsl:call-template name="Description"/>
	  </td>
	  <td>
	    <table>
	      <xsl:for-each select="*">
		<tr>
		  <xsl:choose>
		    <xsl:when test="self::timer">
                      <td align="left">Time: Elapsed</td>
		      <td align="right">
			<xsl:call-template name="FormatTime">
			  <xsl:with-param name="secs">
			    <xsl:value-of select="elapsed"/>
			  </xsl:with-param>
			</xsl:call-template>
		      </td>
		      <xsl:call-template name="Delta">
			<xsl:with-param name="delta" select="elapsed/@delta"/>
		      </xsl:call-template>
                      <xsl:if test="user">
                        <td align="right">User</td>
                        <td align="right">
                 	<xsl:call-template name="FormatTime">
                 	  <xsl:with-param name="secs">
                 	    <xsl:value-of select="user"/>
                 	  </xsl:with-param>
                 	</xsl:call-template>
                        </td>
                        <xsl:call-template name="Delta">
                 	  <xsl:with-param name="delta" select="user/@delta"/>
                        </xsl:call-template>
                      </xsl:if>
                      <xsl:if test="system">
                        <td align="right">System</td>
                        <td align="right">
                 	<xsl:call-template name="FormatTime">
                 	  <xsl:with-param name="secs">
                 	    <xsl:value-of select="system"/>
                 	  </xsl:with-param>
                 	</xsl:call-template>
                        </td>
                        <xsl:call-template name="Delta">
                 	  <xsl:with-param name="delta" select="system/@delta"/>
                        </xsl:call-template>
                      </xsl:if>
		    </xsl:when>
		    <xsl:otherwise>
		      <xsl:apply-templates select="."/>
		    </xsl:otherwise>
		  </xsl:choose>
		</tr>
	      </xsl:for-each>
	    </table>
	  </td>
	</xsl:element>
      </xsl:for-each>
    </table>
</xsl:template>

<!-- An arbitrary list of stats. -->
<xsl:template match="stats">
  <td><xsl:call-template name="Description"/></td>
  <td colspan="0" style="border:1px solid">
      <xsl:call-template name="MakeTable">
	<xsl:with-param name="style">
	  border: 1px solid black
	</xsl:with-param>
      </xsl:call-template>
  </td>
</xsl:template>

<xsl:template name="FormatInt">
    <xsl:param name="value"/>
    <xsl:value-of select="format-number($value, '###,###,##0')"/>
</xsl:template>

<xsl:template match="int">
    <td><xsl:call-template name="Description"/></td>
    <td align="right"><xsl:value-of select="format-number(., '###,###,##0')"/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="@delta"/>
    </xsl:call-template>
    <td colspan="0"/>
</xsl:template>

<xsl:template match="float">
    <td><xsl:call-template name="Description"/></td>
    <td align="right"><xsl:value-of select="."/></td>
    <xsl:call-template name="Delta">
      <xsl:with-param name="delta" select="@delta"/>
    </xsl:call-template>
    <td colspan="0"/>
</xsl:template>

<xsl:template match="string">
    <td><xsl:call-template name="Description"/></td>
    <td><xsl:value-of select="."/></td>
    <td>
      <xsl:if test="@delta != 0">
	  (differs)
      </xsl:if>
    </td>
    <td colspan="0"/>
</xsl:template>

<!-- A pull-down menu with a a list of sections (e.g. total, reyes, rayhits).
     Present each section in a <div>. -->
<xsl:template name="PullDown">
    <!-- JavaScript -->
    <script type="text/javascript">
      <xsl:text>
      </xsl:text>	
    </script>

    <!-- Pull-down menu of subsections. -->
    <dl>
    <dt>
      <select onChange="selectChanged(this)">
	<xsl:for-each select="*">
	  <xsl:element name="option">
	    <xsl:attribute name="value">
	      <xsl:value-of select="generate-id()"/>
	    </xsl:attribute>
	    <xsl:value-of select="@description"/>
	  </xsl:element>
	</xsl:for-each>
      </select>
    </dt>

    <!-- Subsections -->
    <dd>
    <xsl:for-each select="*">
      <xsl:element name="div">
        <!-- Be careful to avoid whitespace in the following id. -->
	<xsl:attribute name="id"><xsl:value-of select="generate-id()"/></xsl:attribute>

	<!-- Sections are initially invisible, except for the first one. -->
	<xsl:if test="position() > 1">
	  <xsl:attribute name="style">display:none</xsl:attribute>
	</xsl:if>

	<xsl:call-template name="MakeTable"/>
      </xsl:element>
    </xsl:for-each>
    </dd>
    </dl>
</xsl:template>

<!-- Display a table of stats.  Multi-column stats like <memory> and <range>
     are grouped so that they can share column headings. -->
<xsl:template name="MakeTable">
    <!-- Strings -->
    <table>
      <xsl:for-each select="string">
	<xsl:call-template name="MakeRow"/>
      </xsl:for-each>
    </table>

    <table>
      <xsl:if test="timer">
	<tr class="headers">
	  <td>Timer</td>
	  <td align="right">Elapsed</td>
	  <td/>
	  <xsl:if test="timer/user">
	    <td align="right">User</td>
	    <td/>
	    <td align="right">System</td>
	    <td/>
	  </xsl:if>
	  <td colspan="0"/>
	</tr>
	<xsl:for-each select="timer">
	  <xsl:call-template name="MakeRow"/>
	</xsl:for-each>
	<tr class="headers" style="height:4px">
	  <td colspan="0"/>
	</tr>
      </xsl:if>

      <xsl:if test="memory">
	<tr class="headers">
	  <td>Memory</td>
	  <td align="right">Peak MB</td>
	  <td/>
	  <td align="right">Current MB</td>
	  <td/>
	  <xsl:if test="*/total">
	    <td align="right">Total MB</td>
	    <td/>
	  </xsl:if>
	  <xsl:if test="*/count">
	    <td align="right">Count</td>
	    <td/>
	  </xsl:if>
	  <td colspan="0"/>
	</tr>
	<xsl:for-each select="memory">
	  <xsl:call-template name="MakeRow"/>
	</xsl:for-each>
	<tr class="headers" style="height:4px">
	  <td colspan="0"/>
	</tr>
      </xsl:if>

      <xsl:if test="range">
	<tr class="headers">
	  <td>Range</td>
	  <td align="right">Current</td>
	  <td/>
	  <td align="right">Total</td>
	  <td/>
	  <td align="right">Peak</td>
	  <td/>
	  <td align="right">Average</td>
	  <td/>
	  <td align="right">Number</td>
	  <td/>
	  <td colspan="0"/>
	</tr>
	<xsl:for-each select="range">
	  <xsl:call-template name="MakeRow"/>
	</xsl:for-each>
	<tr class="headers" style="height:4px">
	  <td colspan="0"/>
	</tr>
      </xsl:if>

      <!-- Numeric stats. -->
      <xsl:for-each select="*[self::int or self::float]">
	<xsl:call-template name="MakeRow"/>
      </xsl:for-each>
    </table>

    <!-- Timer lists. -->
    <table>
      <xsl:for-each select="*[self::stats and @kind='timers']">
	<xsl:apply-templates select="."/>
      </xsl:for-each>
    </table>

    <!-- Memstat lists. -->
    <table>
      <xsl:for-each select="*[self::stats and @kind='memstats']">
	<xsl:apply-templates select="."/>
      </xsl:for-each>
    </table>

    <!-- Nested stats lists, kind "pulldown". -->
    <xsl:for-each select="*[self::stats and @kind='pulldown']">
      <xsl:call-template name="PullDown"/>
    </xsl:for-each>

    <!-- Nested stats lists, except timers and memsats. -->
    <xsl:for-each select="*[self::stats and not(@kind='pulldown' or
                                                @kind='memstats' or
                                                @kind='timers' or
						@kind='geometryprocedurals' or
                                                @kind='shaders' or
                                                @name='textureFiles' or
                                                @name='RixPluginCache'
						)]">
      <xsl:call-template name="MakeSubsection"/>
    </xsl:for-each>

    <!-- Other nested stats. -->
    <table>
      <xsl:for-each select="*[not(self::string or self::range or self::memory or
                                  self::int or self::float or self::timer or
	                          self::stats)]">
	<xsl:call-template name="MakeRow"/>
      </xsl:for-each>
    </table>

    <!-- Displacement bounds -->
    <xsl:if test="*[self::stats and @name='dispbounds']">
      <table>
	<tr class="headers">
	  <td align="right">Disp</td>
	  <td align="right">Bound</td>
	  <td align="right">Ratio</td>
	  <td>Object/Shaders</td>
	</tr>
	<xsl:for-each select="*[self::stats and @name='dispbounds']/*">
	  <xsl:sort select="float[@name='ratio']" 
	    data-type="number" order="descending"/>
	  <tr>
	    <td align="right">
	      <xsl:value-of select="format-number(float[@name='displacement'], '0.000')"/>
	    </td>
	    <td align="right">
	      <xsl:value-of select="format-number(float[@name='displacementBound'], '0.000')"/>
	    </td>
	    <td align="right">
	      <xsl:value-of select="format-number(float[@name='ratio'], '0.000')"/>
	    </td>
	    <td>
	      <xsl:value-of select="string[@name='objectName']"/>
	      <br/>
	      <xsl:if test="string[@name='displacementShader']">
		displacement:
		<xsl:value-of select="string[@name='displacementShader']"/>
		<br/>
	      </xsl:if>
	      <xsl:if test="string[@name='surfaceShader']">
		surface: 
		<xsl:value-of select="string[@name='surfaceShader']"/>
		<br/>
	      </xsl:if>
	    </td>
	  </tr>
	</xsl:for-each>
      </table>
    </xsl:if>

    <!-- Per-geometryprocedural stats. -->
    <xsl:for-each select="*[self::stats and @kind='geometryprocedurals']">
      <xsl:apply-templates select="."/>
    </xsl:for-each>

    <!-- Per-shader stats. -->
    <xsl:for-each select="*[self::stats and @kind='shaders']">
      <xsl:apply-templates select="."/>
    </xsl:for-each>

    <!-- Per-texture stats. -->
    <xsl:for-each select="*[self::stats and @name='textureFiles']">
      <xsl:apply-templates select="."/>
    </xsl:for-each>

    <!-- Per-bxdf and pattern stats. -->
    <xsl:for-each select="*[self::stats and @name='RixPluginCache']">
      <xsl:apply-templates select="."/>
    </xsl:for-each>

</xsl:template>

<!-- Generate table rows with alternating classes (for highlighting). -->
<xsl:template name="MakeRow">
    <xsl:element name="tr">
      <xsl:attribute name="class">
	<!-- The row class alternates between "odd" and "even". -->
	<xsl:choose>
	  <xsl:when test="(position() mod 2) = 1">odd</xsl:when>
	  <xsl:otherwise>even</xsl:otherwise>
	</xsl:choose>
      </xsl:attribute>
      <xsl:apply-templates select="."/>
    </xsl:element>
</xsl:template>

<!-- A subsection for a nested stats list. -->
<xsl:template name="MakeSubsection">
    <p><b><xsl:value-of select="@description"/></b></p>
    <xsl:call-template name="MakeTable"/>
</xsl:template>

<!-- Description, or name if no description is available. -->
<xsl:template name="Description">
    <xsl:param name="depth" select="0"/>
    <xsl:element name="span">
      <xsl:attribute name="style">padding-left:<xsl:value-of select="2*$depth"/>em</xsl:attribute>
    <xsl:choose>
      <xsl:when test="@description != ''">
	<xsl:value-of select="@description"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="@name"/>
      </xsl:otherwise>
    </xsl:choose>
    </xsl:element>
</xsl:template>

<xsl:template name="Delta">
    <xsl:param name="delta"/>
    <xsl:choose>
      <xsl:when test="$delta > 0">
	<td>
	  (+<xsl:value-of select="format-number($delta * 100.0, '0.0')"/>%)
	</td>
      </xsl:when>
      <xsl:when test="$delta &lt; 0">
	<td>
	  (<xsl:value-of select="format-number($delta * 100.0, '0.0')"/>%)
	</td>
      </xsl:when>
      <xsl:otherwise>
	<td/>
      </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>


<!--
# Copyright (c) 1986-2016 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608

$ Revision: $
-->

<?xml-stylesheet type="text/xsl" href="#stylesheet"?>
<!DOCTYPE doc [
<!ATTLIST xsl:stylesheet
  id    ID    #REQUIRED>
]>
<doc>
<xsl:stylesheet version="1.0"
                id="stylesheet"
                xmlns:rm="http://renderman.pixar.com"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" media-type="text/html" version="4.0" encoding="iso-8859-1" indent="yes"/>
<xsl:template match="xsl:stylesheet" />

  <xsl:template match="profiles">
    <html style="height:100%">
      <!-- Include inline stylesheet and javascript. -->
      <head>
	<title>Shader profiles</title>
        <xsl:call-template name="InlineStyle"/>
        <xsl:call-template name="InlineScript"/>
      </head>
      <body onload="javascript:resized()" onResize="javascript:resized()">

	<!-- Drop-down menu of per-frame profiles -->
	<div style="margin-bottom: 1ex">
	  <select onChange="selectChanged(this)">
	    <xsl:for-each select="*">
	      <xsl:element name="option">
		<xsl:attribute name="value">frame.<xsl:value-of select="generate-id()"/></xsl:attribute>
		Frame <xsl:value-of select="position()"/>
	      </xsl:element>
	    </xsl:for-each>
	  </select>
	</div>

	<div class="panel" id="panel">
	  <xsl:apply-templates select="*"/>
	</div>

	<!-- Source view. -->
	<div id="filename" style="text-align:center; height:3ex"></div>
	<iframe id="srcFrame" style="display:none" onload="srcLoaded(this)">
	</iframe>
	<iframe id="destFrame" name="destFrame" class="sourceView">
	</iframe>
	<table width="100%">
	  <tr>
	    <td>
	      <label title="Some browsers omit the first line it's blank.">
		<input type="checkbox" 
		  id="offByOne" onclick="toggleOffByOne(this)"/>
		Line numbers are off by one 
	      </label>
	      (<a href="javascript:offByOneInfo()">What's this?</a>)
	    </td>
	    <td align="right">
	      <input type="button" value="bigger"
		onclick="resizeSrc(this.value)"/>
	      <input type="button" value="smaller" 
		onclick="resizeSrc(this.value)"/>
	    </td>
	  </tr>
	</table>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="frame">
    <xsl:element name="div">
      <xsl:attribute name="id">frame.<xsl:value-of select="generate-id()"/></xsl:attribute>
      <xsl:attribute name="style">
	<xsl:choose>
	  <xsl:when test="position() = 1">
	    display: block
	  </xsl:when>
	  <xsl:otherwise>
	    display: none
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:attribute>
      <xsl:apply-templates select="*"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="uninstrumented">
    <div style="margin-bottom:1ex">
      <label>
	<xsl:element name="input">
	  <xsl:attribute name="type">checkbox</xsl:attribute>
	  <xsl:attribute name="onclick">toggleDisplay('uninst.<xsl:value-of select="generate-id()"/>')</xsl:attribute>
	  <xsl:attribute name="style">margin-right:.5em</xsl:attribute>
	</xsl:element>
	<xsl:value-of select="count(*)"/> uninstrumented shader(s)
      </label>
      <xsl:element name="div">
	<xsl:attribute name="id">uninst.<xsl:value-of select="generate-id()"/></xsl:attribute>
	<xsl:attribute name="style">display:none;margin-left:2em</xsl:attribute>
	Recompile these shaders to add instrumentation:
	<ul style="margin-top:0px">
	  <xsl:for-each select="*">
	    <li>
	      <xsl:value-of select="."/>
	    </li>
	  </xsl:for-each>
	</ul>
      </xsl:element>
    </div>
  </xsl:template>


  <xsl:template match="hotspots">
    <xsl:if test="count(*) > 0">
      <table class="hotspot">
	<tr>
	  <td class="expand"><div class="expand"><b>Details</b></div></td>
	  <td class="time"><b>Time</b></td>
	  <td class="percent"><b>Percent</b></td>
	  <td class="line"><b>Line</b></td>
	  <td class="function"><b>Context</b></td>
	  <td class="filename"><b>Filename</b></td>
	</tr>
      </table>
    </xsl:if>
    <xsl:for-each select="*">
      <xsl:apply-templates select="."/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="hotspot">
    <table class="hotspot">
      <tr>
	<td class="expand">
	  <xsl:call-template name="Expand">
	    <xsl:with-param name="id" select="generate-id()"/>
	  </xsl:call-template>
	</td>
	<td class="time">
	  <xsl:apply-templates select="time"/>
	</td>
	<td class="percent">
	  <xsl:apply-templates select="contribution"/>
	</td>
	<td class="line">
	  <xsl:apply-templates select="line"/>
	</td>
	<td class="function">
	  <xsl:apply-templates select="function"/>
	</td>
	<td class="filename">
	  <xsl:apply-templates select="filename"/>
	</td>
      </tr>
    </table>
    <xsl:apply-templates select="stacks">
      <xsl:with-param name="id" select="generate-id()"/>
    </xsl:apply-templates>
  </xsl:template>

  <xsl:template match="stacks">
    <xsl:param name="id"/>
    <xsl:element name="div">
      <xsl:attribute name="class">stacks</xsl:attribute>
      <xsl:attribute name="id">callers.<xsl:value-of select="$id"/></xsl:attribute>
      <xsl:for-each select="*">
	<xsl:sort select="@contribution" data-type="number" order="descending"/>
	<xsl:apply-templates select="."/>
      </xsl:for-each>
    </xsl:element>
  </xsl:template>

  <xsl:template match="stack">
    <xsl:variable name="contribution" select="@contribution"/>
    <xsl:variable name="id" select="generate-id()"/>
    <div>
      <xsl:for-each select="*[position()=1]">
	<table class="hotspot">
	  <tr>
	    <td class="expand">
	      <xsl:call-template name="Expand">
		<xsl:with-param name="id" select="$id"/>
	      </xsl:call-template>
	    </td>
	    <td class="contribution">
	      <xsl:value-of select="format-number($contribution*100.0, '.0')"/>
	      <xsl:text>%</xsl:text>
	    </td>
	    <td class="line">
	      <xsl:apply-templates select="line"/>
	    </td>
	    <td class="function">
	      <xsl:apply-templates select="function"/>
	    </td>
	    <td class="filename">
	      <xsl:apply-templates select="filename"/>
	    </td>
	  </tr>
	</table>
      </xsl:for-each>

      <xsl:element name="div">
	<xsl:attribute name="style">display:none</xsl:attribute>
	<xsl:attribute name="id">callers.<xsl:value-of select="generate-id()"/></xsl:attribute>
	<xsl:for-each select="*[position()>1]">
	  <table class="hotspot">
	    <tr>
	      <td class="expand"></td>
	      <td class="contribution"></td>
	      <td class="line">
		<xsl:apply-templates select="line"/>
	      </td>
	      <td class="function">
		<xsl:apply-templates select="function"/>
	      </td>
	      <td class="filename">
		<xsl:apply-templates select="filename"/>
	      </td>
	    </tr>
	  </table>
	</xsl:for-each>
	<hr/>
      </xsl:element>
    </div>
  </xsl:template>

  <xsl:template match="time">
      <xsl:variable name="hours" select="floor(. div 3600)"/>
      <xsl:variable name="minutes" select="floor((. mod 3600) div 60)"/>
      <xsl:variable name="seconds" select=". mod 60"/>
      <xsl:choose>
	<xsl:when test="$hours > 0">
	  <xsl:value-of select="$hours"/>
	  <xsl:text>:</xsl:text>      
	  <xsl:value-of select="format-number($minutes, '00')"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="format-number($minutes, '0')"/>
	</xsl:otherwise>
      </xsl:choose>      
      <xsl:text>:</xsl:text>
      <xsl:value-of select="format-number($seconds, '00.0')"/>
  </xsl:template>

  <xsl:template match="contribution">
    <xsl:value-of select="format-number(. * 100.0, '.0')"/>%
  </xsl:template>

  <xsl:template match="line">
    <xsl:element name="a">
      <xsl:attribute name="id"><xsl:value-of select="generate-id()"/></xsl:attribute>
      <xsl:attribute name="href">javascript:loadSource('<xsl:value-of select="../fullname"/>',<xsl:value-of select="."/>,'<xsl:value-of select="generate-id()"/>')</xsl:attribute>
      <xsl:value-of select="."/>
    </xsl:element>
  </xsl:template>

  <xsl:template name="Expand">
    <xsl:param name="id"/>
    <xsl:element name="input">
      <xsl:attribute name="type">checkbox</xsl:attribute>
      <xsl:attribute name="onclick">toggleDisplay('callers.<xsl:value-of select="$id"/>')</xsl:attribute>
    </xsl:element>
  </xsl:template>

  <xsl:template match="function">
    <xsl:element name="div">
      <xsl:attribute name="class">function</xsl:attribute>
      <xsl:attribute name="title">
	<xsl:value-of select="."/>
      </xsl:attribute>      
      <xsl:value-of select="."/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="filename">
    <xsl:element name="div">
      <xsl:attribute name="class">filename</xsl:attribute>
      <xsl:attribute name="title">
	<xsl:value-of select="."/>
      </xsl:attribute>      
      <xsl:value-of select="."/>
    </xsl:element>
  </xsl:template>

  <xsl:template name="InlineStyle">
    <style type="text/css">
      <xsl:text>
	body {
	    background-color: #c6dbff;
	    font-family: Trebuchet, Arial, sans-serif; 
	    height: 100%;
	}
	.panel {
	    background-color: white;
	    border: 1px solid black;
	    width: 100%;
	    overflow: auto;
	}
	.hotspot {
	    white-space: nowrap;
	    width: 48em;
	}
	.sourceView {
	    background-color: white;
	    height: 30%;
	    width: 100%;
	}
	td {
	    padding-right: .8em;
	}
	.expand {
	    width: 25px;
	    overflow: visible;
	    padding-right: 0px;
	}
	.time {
	    width: 5em;
	    text-align: right;
	}
	.percent {
	    width: 3em;
	    text-align: right;
	}
	.contribution {
	    width: 8em;
	    text-align: right;
	}
	.line {
	    width: 4em;
	    text-align: right;
	}
	.function {
	    width: 14em;
	    overflow: hidden;
	    white-space: nowrap;
	}
	.filename {
	    white-space: nowrap;
	}
	.stacks {
	    display: none;
	    margin-left: 2em;
	}
	.stack {
	    display: none;
	}
      </xsl:text>
    </style>
  </xsl:template>

  <xsl:template name="InlineScript">
    <script type="text/javascript">
      <xsl:text>
	var currentRow = null;
	function toggleDisplay(id) {
	    element = document.getElementById(id);
	    if (element.style.display == 'block')
	        element.style.display = 'none';
	    else
	        element.style.display = 'block';
	}
        function selectChanged(select) {
            if (select.previous)
                document.getElementById(select.previous).style.display = 'none';
            else {
                first = select.childNodes[0].getAttribute('value');
                document.getElementById(first).style.display = 'none';
            }
            document.getElementById(select.value).style.display = 'block';
            select.previous = select.value;
        }
	var loadTimeout = null;
	function srcLoaded(srcFrame) {
	    if (loadTimeout) {
		clearTimeout(loadTimeout);
		loadTimeout = null;
	    }
	    if (srcFrame.filename == null) 
		return true;
	    var filename = srcFrame.filename;
	    var targetLine = srcFrame.lineNum;
	    var offByOne = srcFrame.offByOne;
	
	    var srcDoc = null;
	    try {
		var srcDoc = srcFrame.contentWindow || srcFrame.contentDocument;
		if (srcDoc.document) srcDoc = srcDoc.document;
	    }
	    catch (e) {
		srcFrame.filename = null;
		srcNotFound(filename);
		return true;
	    }

	    // Concatenate all the text nodes in the pre.
	    var srcElement = srcDoc.getElementsByTagName('pre')[0];
	    var srcText = '';
	    if (srcElement) {
		var i = 0;
		for (; i &lt; srcElement.childNodes.length; ++i) {
		    var child = srcElement.childNodes[i];
		    if (child.nodeType != -1) 
			srcText += child.data;
		}
	    }
	    else
		loadError(filename);

	    srcText = srcText.replace(/&amp;/g, '&amp;amp;');
	    srcText = srcText.replace(/&lt;/g, '&amp;lt;');
	
	    var destFrame = document.getElementById('destFrame');
	    var destDoc = destFrame.contentWindow || destFrame.contentDocument;
	    if (destDoc.document) destDoc = destDoc.document;
	
	    destDoc.open();
	    destDoc.writeln('&lt;pre>');
	
	    // Under Windows the lines are separated by CR, not NL.
	    var lineDelim = '\n';
	    if (srcText.indexOf(lineDelim) == -1)
		lineDelim = '\r';
	
	    var start = new Date();
	
	    // Write lines from srcText to destDoc, adding line numbers.
	    var index = 0;
	    var lineNum = 1;
	    if (offByOne) {
	        destDoc.writeln('1');
	        ++lineNum;
	    }
	    var n = srcText.length;
	    while (index &lt; n) {
		var nextIndex = srcText.indexOf(lineDelim, index);
		if (nextIndex == -1)
		    nextIndex = srcText.length;
	
		var lineStr = new String(lineNum); 
		var pad = 8 - lineStr.length;
		while (pad-- > 0)
		    lineStr += ' ';
		if (lineNum == targetLine)
		    destDoc.write('&lt;div id="targetLine" ' +
				  'style="background-color:#c6dbff">');
		destDoc.write(lineStr);
		destDoc.writeln(srcText.substring(index, nextIndex));
		if (lineNum == targetLine)
		    destDoc.write('&lt;/div>');
	
		index = nextIndex + 1;
		++lineNum;
	    }
	
	    destDoc.writeln('&lt;/pre>');
	    destDoc.close();
	
	    var target = destDoc.getElementById('targetLine');
	    if (target) {
		target.scrollIntoView(false);
	        // Note: must get destFrame by name here (not id).
	        window.frames.destFrame.scrollBy(0, destFrame.scrollHeight/2);
	    }

	    resized();
	    return true;
	}
	
	function srcNotFound(filename) {
	    if (loadTimeout)
		clearTimeout(loadTimeout);

	    var destFrame = document.getElementById('destFrame');
	    var destDoc = destFrame.contentWindow || destFrame.contentDocument;
	    if (destDoc.document) destDoc = destDoc.document;
	    destDoc.open();
	    destDoc.writeln('File not found: ' + filename);
	    destDoc.close();

	    // destDoc.writeln(
	    //     '&lt;form onsubmit="' +
	    //     'return parent.fileChosen(chooser.value,' 
	    // 	    + lineNum + ')" action="">' + 
	    // 	'Please specify location of file:&lt;br/>' +
	    // 	'&lt;input type="file" name="chooser" size="60" tabindex="1">' +
	    // 	'&lt;/input>&lt;br/>' +
	    //     '&lt;input type="submit" value="Submit">&lt;/input>' +
	    //     '&lt;/form>'
	    // 	);
	    // destDoc.close();
	    // destDoc.forms[0].chooser.focus();
	    // var srcFrame = document.getElementById('srcFrame');
	    // // srcFrame.history.back();
	}

	function loadError(filename) {
	    loadTimeout = null;
	    alert('Loading timed out.\n\n' +
		  'Some browsers will not load a file starting with #define\n' +
		  '(add some text to the top of the file).\n\n' +
		  'Also, check file association for this filename extension\n' +
                  '(check MIME handler too).\n');
	}
	
	function loadSource(filename, lineNum, anchorId) {
	    if (currentRow)
	        currentRow.style.backgroundColor = '';
	    currentRow = document.getElementById(anchorId).parentNode.parentNode;
	    currentRow.style.backgroundColor = '#c6dbff';

	    document.getElementById('filename').innerHTML = filename;

	    // If the filename starts with a drive letter, prefix it with /
	    if (filename[1] == ':')
	        filename = '/' + filename;

	    // Store filename and line number on source frame.
	    var srcFrame = document.getElementById('srcFrame');
	    srcFrame.filename = filename;
	    srcFrame.lineNum = lineNum;
	    srcFrame.offByOne = false;
	    document.getElementById('offByOne').checked = false;

	    reloadSource();
	}

	function reloadSource() {
	    var srcFrame = document.getElementById('srcFrame');
	    var filename = srcFrame.filename;
	    try {
		var srcDoc = srcFrame.contentWindow || srcFrame.contentDocument;
		if (srcDoc.document) srcDoc = srcDoc.document;
		srcDoc.location.replace(filename);

		// We don't get an onload event if the file starts with #,
		// so set a timeout just in case.
		loadTimeout = setTimeout('loadError("' + filename + '")', 5000);
	    }
	    catch (e) {
		if (loadTimeout) 
		    clearTimeout(loadTimeout);
		srcFrame.filename = null;
	        srcNotFound(filename);
	    }
	}

	function offByOneInfo() {
	    alert('Some browsers omit the first line if it\'s blank.');
	}

	function toggleOffByOne(checkbox) {
	    var srcFrame = document.getElementById('srcFrame');
	    srcFrame.offByOne = checkbox.checked;
	    if (srcFrame.filename)
	        reloadSource();
	}

	function resized() {
	    // Get the height of all the top-level elements, excluding the
	    // main panel.
	    var panel = document.getElementById('panel');
	    var contentHeight = 0;
	    var i;
	    for (i = 0; i &lt; document.body.childNodes.length; ++i) {
	        var element = document.body.childNodes[i];
		if (element &amp;&amp; element != panel &amp;&amp;
		    element.offsetHeight)
		    contentHeight += element.offsetHeight;	
	    }
	    var panelHeight = 
		Math.max(0, document.body.offsetHeight - contentHeight - 50);
	    panel.style.height = new String(panelHeight) + 'px';
	}

	function resizeSrc(biggerOrSmaller) {
	    var destFrame = document.getElementById('destFrame');
	    var posOrNeg = biggerOrSmaller == 'smaller' ? -1 : 1;
	    destFrame.style.height = 
	        new String(destFrame.offsetHeight + 25 * posOrNeg) + 'px';
	    resized();
	}
      </xsl:text>
    </script>
  </xsl:template>

</xsl:stylesheet>
